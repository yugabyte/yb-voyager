#!/usr/bin/env python3

import common
import yb
import os
import oracle

def main():
	global test_type_flags
	test_type_flags = common.valparser()

	migration_completed_checks_yb()	
	if test_type_flags['ff_enabled'] == 'true':
		migration_completed_checks_ff()


#=============================================================================

EXPECTED_ROW_COUNT = {
	'identity_demo_generated_by_def_inc_by': 3,        
	'identity_demo_generated_always': 2,        
	'identity_demo_generated_by_def': 3,        
	'identity_demo_generated_always_start_with': 1,        
	'identity_demo_generated_by_def_st_with_inc_by': 3,        
	'identity_demo_generated_by_def_start_with': 3,        
	'identity_demo_with_null': 2,
	'case_sensitive_always': 2
}

EXPECTED_TABLE_SUM = {
	'identity_demo_generated_by_def_inc_by': 105,        
	'identity_demo_generated_always': 3,        
	'identity_demo_generated_by_def': 8,        
	'identity_demo_generated_always_start_with': 101,        
	'identity_demo_generated_by_def_st_with_inc_by': 115,        
	'identity_demo_generated_by_def_start_with': 205,        
	'identity_demo_with_null': 3,
	'case_sensitive_always': 3
}

EXPECTED_TABLE_SUM_AFTER_INSERT = {
	'identity_demo_generated_by_def_inc_by': 409,        
	'identity_demo_generated_always': 7,        
	'identity_demo_generated_by_def': 11,        
	'identity_demo_generated_always_start_with': 204,        
	'identity_demo_generated_by_def_st_with_inc_by': 423,        
	'identity_demo_generated_by_def_start_with': 309,        
	'identity_demo_with_null': 7,
	'case_sensitive_always': 7
}

if os.environ.get('BETA_FAST_DATA_EXPORT') == '1':
	EXPECTED_TABLE_SUM_AFTER_INSERT = {
	'identity_demo_generated_by_def_inc_by': 308,        
	'identity_demo_generated_always': 6,        
	'identity_demo_generated_by_def': 14,        
	'identity_demo_generated_always_start_with': 203,        
	'identity_demo_generated_by_def_st_with_inc_by': 322,        
	'identity_demo_generated_by_def_start_with': 308,        
	'identity_demo_with_null': 6,
	'case_sensitive_always': 6
}

QUERIES_CHECK = {
	'GENERATED ALWAYS': {
		'query': "insert into identity_demo_generated_always values(5,'TEST');",
		'code': "428C9"
	},
	'GENERATED ALWAYS START WITH': {
		'query': "insert into identity_demo_generated_always_start_with values(5,'TEST');",
		'code': "428C9"
	}
}

EXPECTED_IDENTITY_DEFAULT_COLUMNS = {
	'identity_demo_generated_always': ['id'],
	'identity_demo_generated_always_start_with': ['id'],
	'empty_identity_always': ['id'],
}

def migration_completed_checks_yb():
	print("Running tests on YB")
	global db_schema
	db_schema="public"
	yb.run_checks(migration_completed_checks)
	yb.run_checks(YB_specific_checks)

def YB_specific_checks(tgt):
	yb.verify_colocation(tgt, "oracle")

def migration_completed_checks_ff():
	print("Running tests on Oracle source replica")
	global db_schema
	db_schema = os.environ.get("SOURCE_REPLICA_DB_SCHEMA")
	oracle.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks(tgt):
	global test_type_flags
	table_list = tgt.get_table_names(db_schema)
	print("table_list: ", table_list)
	assert len(table_list) == 10

	got_row_count = tgt.row_count_of_all_tables(db_schema)
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, got_row_count: {got_row_count[table_name]}, expected_row_count: {row_count}")
		assert row_count == got_row_count[table_name]

	for table_name, sum_column_values in EXPECTED_TABLE_SUM.items():
		if table_name == "case_sensitive_always" and type(tgt) == oracle.OracleDB: 
			table_name = '"Case_Sensitive_always"'
		got_sum_column_values = tgt.get_sum_of_column_of_table(table_name, "id", db_schema)
		print(f"table_name: {table_name}, got_sum_column_values: {got_sum_column_values}, expected_sum_column_values: {sum_column_values}")
		assert sum_column_values == got_sum_column_values

	if test_type_flags['live_migration'] != 'true':
		for type_check, query_and_code in QUERIES_CHECK.items():
			query, code = query_and_code['query'], query_and_code['code']
			chk_err_returned = tgt.run_query_and_chk_error(query, code)
			print(f"Checking {type_check} ..", code, {chk_err_returned})
			assert chk_err_returned == True

		for table_name, _ in EXPECTED_ROW_COUNT.items():
			INSERT_SEQUENCE_QUERY = f"insert into {table_name} (description) values ('Yugabyte');"
			insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, None)
			print(f"insert query returned for {table_name} - {insert_query_chk_error}")
			assert insert_query_chk_error == False

		for table_name, sum_column_values_after_insert in EXPECTED_TABLE_SUM_AFTER_INSERT.items():
			got_sum_column_values_after_insert = tgt.get_sum_of_column_of_table(table_name, "id", db_schema)
			print(f"table_name: {table_name}, got_sum_column_values: {got_sum_column_values_after_insert}, expected_sum_column_values: {sum_column_values_after_insert}")
			assert sum_column_values_after_insert == got_sum_column_values_after_insert

	else: # in live_migration only 
		for table_name, columns in EXPECTED_IDENTITY_DEFAULT_COLUMNS.items():
			typename = "BY DEFAULT"
			if test_type_flags['fb_enabled'] == 'true' and type(tgt) == oracle.OracleDB: # as for fall-back identity is change to by default after cutover
				typename = "ALWAYS"
			if table_name == "case_sensitive_always" and type(tgt) == oracle.OracleDB: 
				table_name = '"Case_Sensitive_always"'
			got_columns = tgt.get_identity_type_columns(typename,table_name, db_schema)
			print(f"table_name: {table_name}, got_columns: {got_columns}, expected_columns: {columns}")
			for column in columns:
				assert column in got_columns

if __name__ == "__main__":
	main()