#!/usr/bin/env python3

import yb
import os

def main():
	yb.run_checks(file_import_done_checks)

FOO_DATA = set([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f'), (7, 'g'), (8, 'h'), (9, 'i')])
FOO2_DATA = FOO_DATA
FOO3_DATA = set([(1, 'a'), (2, 'b'), (3, 'c'), (10, 'j'), (11, 'k'), (12, 'l')])

EXPECTED = {
	"one_m_rows": 1000000,
	"survey": 41715,
 	"survey2": 41715,
 	"survey3": 41715,
	"t1_quote_char": 3,
	"t1_quote_escape_char1": 3,
 	"t1_quote_escape_char2": 3,
  	"t1_delimiter_escape_same":3,
  	"t1_newline":5,
   	"t1_quote_escape_dq": 3,
	"t1_escape_backslash": 3,
	"s3_text": 3,
	"s3_csv": 3,
	"s3_multitable_t1": 3,
	"s3_multitable_t2": 3,
	"s3_csv_with_header": 3,
	"s3_volume": 100000,
	"test_backspace_char": 4,
	"test_backspace_char2":3,
	"test_backspace_quote_single_quote_escape": 3,
	"test_backspace_quote_double_quote_escape": 3,
	"test_backspace_escape_double_quote": 3,
	"test_delimiter_backspace": 3,
	"test_delimiter_backspace_text" :3,
	"test_default_delimiter":2,
	"test_default_delimiter_csv":2,
	"t1_null_string_csv": 3,
	"t1_null_string_text": 3,
	"t1_null_string_csv2": 3,
	"t1_null_string_text2": 3,
	"accounts":2000000,
	"foo": len(FOO_DATA),
	"foo2": len(FOO2_DATA),
	"foo3": len(FOO3_DATA),
	"gcs_text": 3,
	"gcs_csv": 3,
	"gcs_multitable_t1": 3,
	"gcs_multitable_t2": 3,
	"gcs_csv_with_header": 3,
	"gcs_volume": 1000000,
	"gcs_quote_escape_char1": 3,
	"accounts_large": 0,
	"large_rows_test":5
}

if os.getenv("RUN_LARGE_IMPORT_DATA_FILE_TEST") == "true":
    EXPECTED["accounts_large"] = 350000000

EXPECTED_NON_PUBLIC = {
	"smsa": 60,
}

T1_TABLE_DATA = set([(1,None,None,"'Hello World'"), (2,None,None,"'Hello World'"), (3,None,None,"'Hello World'")])
T1_QUOTE_ESCAPE_DQ_DATA = set([(1,None,None,"\"Hello World\""), (2,None,None,"\"Hello World\""), (3,None,None,"\"Hello World\"")])
T1_NEWLINE_DATA = set([(1,None,None,"Hello World"), (2,None,None,"Hello\nWorld"), (3,None,None,"Hello	World"),
                       (4,None,None,"Hello\\nWorld"), (5,None,None,"Hello\\tWorld")])
T1_ESCAPE_BACKSLASH_DATA = set([(11, 'Hello world', 11), (12, '",12\n13,\\\\', 13), (10, 'Hello world escape test', 10)])
TEST_BACKSPACE_CHAR_DATA = set([(4, 123, 'Some more testing \x08?'), (2, 123, 'Some test " quote'), (1, 123, 'How\x08s it going?'), (3, 123, "How's it going?")])
TEST_BACKSPACE_CHAR2_DATA = set([(0, 'default', 'CIF-0000000000', 'USER-0000000000', 1000000000, 1000000000, 'Tabungan BNI', 'Jl. Sudirman No. 123, Jakarta', True), (1, 'John Doe', '\\', 'USER-0000000001', 1000000, 1000000, 'Tabungan BNI', 'Jl. Sudirman No. 123, Jakarta', True), (2, 'Jane Doe', 'CIF-0000000002', 'USER-0000000002', 2000000, 2000000, 'Giro BNI', 'Jl. Thamrin No. 456, Jakarta', True)])
TEST_BACKSPACE_QUOTE_SINGLE_QUOTE_ESCAPE_DATA = set([(1, 1233, "How's it going?"), (2, 1233, "How's it going \x08?"), (3, 1233, 'How is it going?')])
TEST_BACKSPACE_QUOTE_DOUBLE_QUOTE_ESCAPE_DATA = set([(2, 1233, 'How"s it going \x08?'), (3, 1233, 'How is it going?'), (1, 1233, 'How"s it going?')])
TEST_BACKSPACE_ESCAPE_DOUBLE_QUOTE_DATA = set([(1, 1233, "How's it going?"), (2, 1233, "How's it going ?"), (3, 1233, 'How is "test quote" it going?')])
TEST_DELIMITER_BACKSPACE_DATA = set([(1, 1233, 'How is it going?'), (2, 1233, 'How is it going ?'), (3, 1233, 'How is it going?')])
TEST_DELIMITER_BACKSPACE_TEXT_DATA = set([(1, 1233, 'How is it going?'), (2, 1233, 'How is it going ?'), (3, 1233, 'How is it going?')])
TEST_DEFAULT_DELIMITER = set([(1, 'some thing for testing'), (2, 'someText')])
T1_NULL_STRING_CSV = set([(1,None,None,"Hello World"), (2,None,None,"Hello World"), (3,None,None,"Hello World")])
T1_NULL_STRING_TEXT = set([(1,None,None,"Hello World"), (2,None,None,"Hello World"), (3,None,None,"Hello World")])
S3_TEXT_DATA = set([(1,2,3), (4,5,6), (7,8,9)])
S3_CSV_DATA = set([(1,2), (3,4), (5,6)])
S3_T1_DATA = S3_TEXT_DATA
S3_T2_DATA = S3_TEXT_DATA
S3_CSV_WITH_HEADER_DATA = S3_TEXT_DATA
LARGE_ROWS_TEST_DATA = {
	1:15000000,
	2:11000000,
	3:5000,
	4:12131220,
	5:9900000
 } #id, len(val)


TABLE_NAME_DATA_MAP = {
	"t1_quote_char": T1_TABLE_DATA,
	"t1_quote_escape_char1": T1_TABLE_DATA,
	"t1_quote_escape_char2": T1_TABLE_DATA,
	"t1_delimiter_escape_same": T1_TABLE_DATA,
	"t1_newline": T1_NEWLINE_DATA,
	"t1_quote_escape_dq": T1_QUOTE_ESCAPE_DQ_DATA,
	"t1_escape_backslash": T1_ESCAPE_BACKSLASH_DATA,
	"s3_text": S3_TEXT_DATA,
	"s3_csv": S3_CSV_DATA,
	"s3_multitable_t1": S3_T1_DATA,
	"s3_multitable_t2": S3_T2_DATA,
	"s3_csv_with_header": S3_CSV_WITH_HEADER_DATA,
	"test_backspace_char": TEST_BACKSPACE_CHAR_DATA,
	"test_backspace_char2": TEST_BACKSPACE_CHAR2_DATA,
	"test_backspace_quote_single_quote_escape": TEST_BACKSPACE_QUOTE_SINGLE_QUOTE_ESCAPE_DATA,
	"test_backspace_quote_double_quote_escape": TEST_BACKSPACE_QUOTE_DOUBLE_QUOTE_ESCAPE_DATA,
	"test_backspace_escape_double_quote": TEST_BACKSPACE_ESCAPE_DOUBLE_QUOTE_DATA,
	"test_delimiter_backspace": TEST_DELIMITER_BACKSPACE_DATA,
	"test_delimiter_backspace_text" : TEST_DELIMITER_BACKSPACE_TEXT_DATA,
	"t1_null_string_csv": T1_NULL_STRING_CSV,
	"t1_null_string_text": T1_NULL_STRING_TEXT,
	"t1_null_string_csv2": T1_NULL_STRING_CSV,
	"t1_null_string_text2": T1_NULL_STRING_TEXT,
	"test_default_delimiter": TEST_DEFAULT_DELIMITER,
	"test_default_delimiter_csv": TEST_DEFAULT_DELIMITER,
	"foo": FOO_DATA,
	"foo2": FOO2_DATA,
	"foo3": FOO3_DATA,
	"gcs_text": S3_TEXT_DATA,
	"gcs_csv": S3_CSV_DATA,
	"gcs_multitable_t1": S3_T1_DATA,
	"gcs_multitable_t2": S3_T2_DATA,
	"gcs_csv_with_header": S3_CSV_WITH_HEADER_DATA,
	"gcs_quote_escape_char1": T1_TABLE_DATA,
}

def file_import_done_checks(tgt):
	fetched_row_cnts = tgt.row_count_of_all_tables()
	print(f"Row counts after import data file: {fetched_row_cnts}")
	for table_name, rc in EXPECTED.items():
		assert fetched_row_cnts[table_name] == rc, f"Row count mismatch for table {table_name}, expected: {rc}, got: {fetched_row_cnts[table_name]}"


	fetched_row_cnts_non_public = tgt.row_count_of_all_tables("non_public")
	print(f"Row counts after import data file in non_public schema: {fetched_row_cnts_non_public}")
	assert fetched_row_cnts_non_public == EXPECTED_NON_PUBLIC
	
	for table_name, data in TABLE_NAME_DATA_MAP.items():
		fetched_data = tgt.fetch_all_table_rows(table_name)
		print(f"Data fetched from table {table_name}: {fetched_data}\nExpected data: {data}\n")
		assert fetched_data == data

	fetched_data_large_rows = tgt.fetch_all_table_rows('large_rows_test')
	for row in fetched_data_large_rows:
		id = row[0]
		val_len = len(row[1])
		print(f'expected len for id {id}: {LARGE_ROWS_TEST_DATA[id]}, returned: {val_len}')
		assert LARGE_ROWS_TEST_DATA[id] == val_len

if __name__ == "__main__":
	main()
