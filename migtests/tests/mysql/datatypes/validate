#!/usr/bin/env python3

import yb
import os

def main():
	yb.run_checks(migration_completed_checks)


#=============================================================================

EXPECTED_ROW_COUNT = {
 	'bit_types': 4, 
	'bool_types': 6,  
	'date_time_types': 10, 
	'enum_types': 3,   
	'fixed_point_types': 3,
	'floating_point_types': 4, 
  	'int_types': 4,     
 	'json_types': 5,          
 	'string_types': 1,        
	'uuid_try': 3,
	'blob_types': 2,
	'test':0,
	'c':12,
}

EXPECTED_SUM_OF_COLUMN = {
	'fixed_point_types': {
		'dec_type': '0.44566',
		'numeric_type': '37192.93689',
		'fixed_type': '26554.360',
		'd_us': '1277234.27'
	},
	'floating_point_types': {
		'double_type': '0.3477833',
		'id': '10',
		'real_type': '4.7999',
		'float_type': '123582.612'
	},
	'int_types': {
		'mint_u': '25165822',
		'iint_u': '4294967294',
		'sint_s': '65532',
		'iinteger_s': '-2',
		'iint_s': '-2',
		'sint_u': '65534',
		'tint_s': '-2',
		'bint_s': '-2',
		'iinteger_u':'4294967294',
		'bint_u': '18446744073709551614',
		'tint_u': '510',
		'mint_s': '-2'
	}
}

EXPECTED_ENUM_VALUES = ['low', 'high', 'med']

EXPECTED_DATA_TYPES = {
	'floating_point_types': {
     	'double_type': 'double precision', 
     	'real_type': 'double precision', 
     	'id': 'bigint', 
     	'float_type': 'double precision'
     },
 	'fixed_point_types': {
      	'd_us': 'numeric',
       	'fixed_type': 'numeric',
        'numeric_type': 'numeric',
        'dec_type': 'numeric'
    }, 
  	'string_types': {
       	'text_item': 'text',
        'varchar_item': 'character varying',
        'char_item': 'character',
        'varbinary_item': 'bytea', 
        'longtext_item': 'text',
        'binary_item': 'bytea', 
        'mediumtext_item': 'text'
    }, 
   	'date_time_types': {
        'date_time_type': 'timestamp without time zone',
        'time_stamp_type': 'timestamp without time zone',
        'date_type': 'date', 
        'year_type': 'smallint', 
        'time_type': 'time without time zone'
    }, 
    'json_types': {
        'json_val': 'json'
    }, 
    'int_types': {
        'iint_u': 'bigint',
        'mint_u': 'integer',
        'tint_s': 'smallint',
        'sint_u': 'integer',
        'iint_s': 'bigint',
        'iinteger_s': 'bigint',
        'sint_s': 'integer',
        'tint_u': 'smallint',
        'bint_u': 'numeric',
        'iinteger_u': 'bigint',
        'bint_s': 'bigint',
        'mint_s': 'integer'
    }, 
    'bool_types': {
        'val': 'smallint',
        'id': 'bigint'
    }, 
    'enum_types': {
        'title': 'character varying',
        'priority': 'USER-DEFINED',
        'id': 'bigint'
    }, 
    'uuid_try': {
        'name': 'character varying',
        'id': 'bytea'
    }, 
    'bit_types': {
        'bit_type': 'bit varying'
    },
	'blob_types': {
		'id': 'bigint',
		'tb': 'bytea',
		'b': 'bytea',
		'mb': 'bytea',
		'lb': 'bytea'
	},
	'test':{
		'b': 'bytea',
	},
	'c': {
		'c': 'character', 
		'id': 'bigint', 
		'vc': 'character varying'
	}
}

def migration_completed_checks(tgt):
	table_list = tgt.get_table_names("public")
	print("table_list:", table_list)
	assert len(table_list) == 13

	got_row_count = tgt.row_count_of_all_tables("public")
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]

# Define a small tolerance for floating-point comparisons due to loss of precision during aggregation of partial results in distributed (non-colocated) databases.
# https://github.com/yugabyte/yugabyte-db/issues/25166
	EPSILON = 1e-9

	for table_name, column_names_with_sum in EXPECTED_SUM_OF_COLUMN.items():
		print(f"table_name: {table_name} ---- ")
		for column, expected_sum in column_names_with_sum.items():
			col_sum = tgt.get_sum_of_column_of_table(table_name, column, "public")
			print(f"column_name: {column}, sum: {col_sum}")	
			if table_name == "floating_point_types":  # Handle floating-point comparisons
				assert abs(float(col_sum) - float(expected_sum)) < EPSILON, \
					f"Floating-point mismatch: {column} expected {expected_sum}, got {col_sum}"
			else:
				assert str(col_sum) == expected_sum, \
					f"Mismatch: {column} expected {expected_sum}, got {col_sum}"

	distinct_values_enum_types = tgt.get_distinct_values_of_column_of_table("enum_types", "priority", "public")
	print(f"distinct_enum_values:")
	for distinct_value in distinct_values_enum_types:
		print(f"{distinct_value}")
		assert distinct_value.lower() in EXPECTED_ENUM_VALUES

	distinct_values_bool_types = tgt.get_distinct_values_of_column_of_table("bool_types", "val", "public")
	print(f"distinct_bool_values:")
	for distinct_value in distinct_values_bool_types:
		print(f"{distinct_value}")
		assert distinct_value == 0 or distinct_value == 1
	
	fetched_datatypes_schema = tgt.get_column_to_data_type_mapping("public")
 
	print(fetched_datatypes_schema)
	for table_name, columns in fetched_datatypes_schema.items():
		print(f"table_name: {table_name} ---- ")
		for column_name, datatype in columns.items():
			print(f"column_name: {column_name}, datatype: {datatype}")
			assert datatype == EXPECTED_DATA_TYPES[table_name][column_name]

	fetched_value_b_column_in_blob_types = tgt.execute_query("SELECT b FROM blob_types where id = 1") # blob/tinyblob/mediumblob/longblob datatypes data is not exported
	print(fetched_value_b_column_in_blob_types)
	assert fetched_value_b_column_in_blob_types == None
if __name__ == "__main__":
	main()