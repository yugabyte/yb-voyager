{
	"VoyagerVersion": "main",
	"TargetDBVersion": "2024.2.2.3",
	"MigrationComplexity": "LOW",
	"MigrationComplexityExplanation": "Found 13 Level 1 issue(s) and 0 Level 2 issue(s), resulting in LOW migration complexity",
	"SchemaSummary": {
		"Description": "Objects that will be created on the target YugabyteDB.",
		"DbName": "pg_assessment_perf_optimizations",
		"SchemaNames": [
			"public",
			"test"
		],
		"DbVersion": "17.2 (Debian 17.2-1.pgdg120+1)",
		"DatabaseObjects": [
			{
				"ObjectType": "SCHEMA",
				"TotalCount": 2,
				"InvalidCount": 0,
				"ObjectNames": "public, test"
			},
			{
				"ObjectType": "TABLE",
				"TotalCount": 8,
				"InvalidCount": 0,
				"ObjectNames": "public.\"Test_caseSensitive\", public.t, public.test_low_card, public.test_most_freq, public.test_multi_col_idx, public.users, test.t, test.t_low_most"
			},
			{
				"ObjectType": "INDEX",
				"TotalCount": 17,
				"InvalidCount": 10,
				"ObjectNames": "idx ON public.test_low_card, idx_muli_col_key_first_col ON public.test_multi_col_idx, idx_muli_col_key_first_col1 ON public.test_multi_col_idx, idx_name ON public.users, idx_test_case_sensitive ON public.\"Test_caseSensitive\", idx_test_multi_id ON public.test_multi_col_idx, idx_test_multi_id1 ON public.test_multi_col_idx, idx_test_multi_id1_id2 ON public.test_multi_col_idx, idx_test_multi_id2 ON public.test_multi_col_idx, idx_test_multi_val ON public.test_multi_col_idx, idxtt ON public.t, indx ON public.test_most_freq, indx1 ON public.test_most_freq, indx34 ON public.test_most_freq, idx ON test.t, idx2 ON test.t, idx_try ON test.t_low_most"
			}
		]
	},
	"Sizing": {
		"SizingRecommendation": {
			"ColocatedTables": [
				"public.test_low_card",
				"public.Test_caseSensitive",
				"test.t_low_most",
				"test.t",
				"public.t",
				"public.users"
			],
			"ColocatedReasoning": "Recommended instance type with 4 vCPU and 16 GiB memory could fit 13 objects (6 tables/materialized views and 7 explicit/implicit indexes) with 1.25 MB size and throughput requirement of 0 reads/sec and 0 writes/sec as colocated. Rest 12 objects (2 tables/materialized views and 10 explicit/implicit indexes) with 13.05 MB size and throughput requirement of 0 reads/sec and 0 writes/sec need to be migrated as range partitioned tables. Non leaf partition tables/indexes and unsupported tables/indexes were not considered.",
			"ShardedTables": [
				"public.test_most_freq",
				"public.test_multi_col_idx"
			],
			"NumNodes": 3,
			"VCPUsPerInstance": 4,
			"MemoryPerInstance": 16,
			"OptimalSelectConnectionsPerNode": 8,
			"OptimalInsertConnectionsPerNode": 12,
			"EstimatedTimeInMinForImport": 2
		},
		"FailureReasoning": ""
	},
	"AssessmentIssues": [
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx ON public.test_low_card",
			"SqlStatement": "CREATE INDEX idx ON public.test_low_card USING btree (isactive) WHERE (isactive = false);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 2,
				"ColumnName": "isactive"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx_test_case_sensitive ON public.Test_caseSensitive",
			"SqlStatement": "CREATE INDEX idx_test_case_sensitive ON public.\"Test_caseSensitive\" USING btree (id);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 2,
				"ColumnName": "id"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx_test_multi_id2 ON public.test_multi_col_idx",
			"SqlStatement": "CREATE INDEX idx_test_multi_id2 ON public.test_multi_col_idx USING btree (id2);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 10,
				"ColumnName": "id2"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "indx ON public.test_most_freq",
			"SqlStatement": "CREATE INDEX indx ON public.test_most_freq USING btree (status) WHERE (status \u003c\u003e 'active'::text);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 2,
				"ColumnName": "status"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. The first column of this index is low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "indx1 ON public.test_most_freq",
			"SqlStatement": "CREATE INDEX indx1 ON public.test_most_freq USING btree (status, id);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 2,
				"ColumnName": "status"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx ON test.t",
			"SqlStatement": "CREATE INDEX idx ON test.t USING btree (val);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 2,
				"ColumnName": "val"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx2 ON test.t",
			"SqlStatement": "CREATE INDEX idx2 ON test.t USING btree (val1);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 1,
				"ColumnName": "val1"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_LOW_CARDINALITY_COLUMN",
			"Name": "Index on low-cardinality column",
			"Description": "In distributed databases, index design should ensure even data distribution across multiple nodes. Indexes built on low-cardinality columns (e.g., boolean, days of the week) are not optimal, as they may lead to bad data distribution among tablets. This index is built on a low-cardinality column.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx_try ON test.t_low_most",
			"SqlStatement": "CREATE INDEX idx_try ON test.t_low_most USING btree (id);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-low-cardinality-column",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"Cardinality": 2,
				"ColumnName": "id"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_COLUMN_WITH_HIGH_PERCENTAGE_OF_PARTICULAR_VALUE",
			"Name": "Index on column with high percentage of a particular value",
			"Description": "In distributed databases, index design should ensure even data distribution across nodes. Indexes on columns with highly skewed value distributions (e.g., a value appearing in atleast 60% of rows) can cause performance issues in distributed systems due to uneven data placement and lead to Hotspots. This index is built on column having a value occuring in large number of rows.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx_name ON public.users",
			"SqlStatement": "CREATE INDEX idx_name ON public.users USING btree (name);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-column-with-high-percentage-of-a-particular-value",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"ColumnName": "name",
				"FrequencyOfTheValue": "65%",
				"Value": "' '"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_COLUMN_WITH_HIGH_PERCENTAGE_OF_NULL_VALUES",
			"Name": "Index on column with a high percentage of NULL values",
			"Description": "In distributed databases, index design should ensure even data distribution across nodes. Indexes on columns with many NULL values can lead to uneven distribution and can cause performance issues. This index is built on a column having high percentage of NULL values.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idxtt ON public.t",
			"SqlStatement": "CREATE INDEX idxtt ON public.t USING btree (id2);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-column-with-a-high-percentage-of-null-values",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"ColumnName": "id2",
				"FrequencyOfNulls": "100%"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "INDEX_ON_COLUMN_WITH_HIGH_PERCENTAGE_OF_NULL_VALUES",
			"Name": "Index on column with a high percentage of NULL values",
			"Description": "In distributed databases, index design should ensure even data distribution across nodes. Indexes on columns with many NULL values can lead to uneven distribution and can cause performance issues. This index is built on a column having high percentage of NULL values.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx2 ON test.t",
			"SqlStatement": "CREATE INDEX idx2 ON test.t USING btree (val1);",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#index-on-column-with-a-high-percentage-of-null-values",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"ColumnName": "val1",
				"FrequencyOfNulls": "50%"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "REDUNDANT_INDEXES",
			"Name": "Redundant index",
			"Description": "Redundant indexes can be dropped when a stronger index is present. A stronger index is one that includes the same initial key columns (in order) and may extend with additional keys, thus fully covering the redundant one.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx_muli_col_key_first_col1 ON public.test_multi_col_idx",
			"SqlStatement": "CREATE INDEX idx_muli_col_key_first_col1 ON public.test_multi_col_idx USING btree ((((id1 || '_'::text) || id2)))",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#redundant-indexes",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"ExistingIndexSQLStatement": "CREATE INDEX idx_muli_col_key_first_col ON public.test_multi_col_idx USING btree ((((id1 || '_'::text) || id2)), val)"
			}
		},
		{
			"Category": "performance_optimizations",
			"CategoryDescription": "Recommendations to source schema or queries to optimize performance on YugabyteDB.",
			"Type": "REDUNDANT_INDEXES",
			"Name": "Redundant index",
			"Description": "Redundant indexes can be dropped when a stronger index is present. A stronger index is one that includes the same initial key columns (in order) and may extend with additional keys, thus fully covering the redundant one.",
			"Impact": "LEVEL_1",
			"ObjectType": "INDEX",
			"ObjectName": "idx_test_multi_id1 ON public.test_multi_col_idx",
			"SqlStatement": "CREATE INDEX idx_test_multi_id1 ON public.test_multi_col_idx USING btree (id1)",
			"DocsLink": "https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/postgresql/#redundant-indexes",
			"MinimumVersionsFixedIn": null,
			"Details": {
				"ExistingIndexSQLStatement": "CREATE INDEX idx_test_multi_id1_id2 ON public.test_multi_col_idx USING btree (id1, id2)"
			}
		}
	],
	"TableIndexStats": [
		{
			"SchemaName": "public",
			"ObjectName": "t",
			"RowCount": 20000,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 655360
		},
		{
			"SchemaName": "public",
			"ObjectName": "test_most_freq",
			"RowCount": 20000,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 786432
		},
		{
			"SchemaName": "public",
			"ObjectName": "test_low_card",
			"RowCount": 100,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 8192
		},
		{
			"SchemaName": "public",
			"ObjectName": "test_multi_col_idx",
			"RowCount": 200004,
			"ColumnCount": 4,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 5636096
		},
		{
			"SchemaName": "public",
			"ObjectName": "users",
			"RowCount": 20000,
			"ColumnCount": 3,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 655360
		},
		{
			"SchemaName": "public",
			"ObjectName": "Test_caseSensitive",
			"RowCount": 200,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 8192
		},
		{
			"SchemaName": "test",
			"ObjectName": "t_low_most",
			"RowCount": 200,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 8192
		},
		{
			"SchemaName": "test",
			"ObjectName": "t",
			"RowCount": 4,
			"ColumnCount": 3,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": false,
			"ObjectType": "table",
			"ParentTableName": null,
			"SizeInBytes": 8192
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_test_case_sensitive",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.Test_caseSensitive",
			"SizeInBytes": 16384
		},
		{
			"SchemaName": "public",
			"ObjectName": "idxtt",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.t",
			"SizeInBytes": 90112
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_low_card",
			"SizeInBytes": 16384
		},
		{
			"SchemaName": "public",
			"ObjectName": "indx34",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_most_freq",
			"SizeInBytes": 245760
		},
		{
			"SchemaName": "public",
			"ObjectName": "indx1",
			"RowCount": null,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_most_freq",
			"SizeInBytes": 335872
		},
		{
			"SchemaName": "public",
			"ObjectName": "indx",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_most_freq",
			"SizeInBytes": 16384
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_test_multi_val",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 704512
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_test_multi_id2",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 712704
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_test_multi_id1_id2",
			"RowCount": null,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 745472
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_test_multi_id1",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 745472
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_test_multi_id",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 2260992
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_muli_col_key_first_col1",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 745472
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_muli_col_key_first_col",
			"RowCount": null,
			"ColumnCount": 2,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.test_multi_col_idx",
			"SizeInBytes": 761856
		},
		{
			"SchemaName": "public",
			"ObjectName": "idx_name",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "public.users",
			"SizeInBytes": 90112
		},
		{
			"SchemaName": "public",
			"ObjectName": "users_pkey",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "primary key",
			"ParentTableName": "public.users",
			"SizeInBytes": 245760
		},
		{
			"SchemaName": "test",
			"ObjectName": "idx2",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "test.t",
			"SizeInBytes": 16384
		},
		{
			"SchemaName": "test",
			"ObjectName": "idx",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "test.t",
			"SizeInBytes": 16384
		},
		{
			"SchemaName": "test",
			"ObjectName": "idx_try",
			"RowCount": null,
			"ColumnCount": 1,
			"ReadsPerSecond": 0,
			"WritesPerSecond": 0,
			"IsIndex": true,
			"ObjectType": "index",
			"ParentTableName": "test.t_low_most",
			"SizeInBytes": 16384
		}
	],
	"Notes": [
		"Some features listed in this report may be supported under a preview flag in the specified target-db-version of YugabyteDB. Please refer to the official \u003ca class=\"highlight-link\" target=\"_blank\" href=\"https://docs.yugabyte.com/preview/releases/ybdb-releases/\"\u003erelease notes\u003c/a\u003e for detailed information and usage guidelines.",
		"If there are any tables that receive disproportionately high load, ensure that they are NOT colocated to avoid the colocated tablet becoming a hotspot.\nFor additional considerations related to colocated tables, refer to the documentation at: https://docs.yugabyte.com/preview/explore/colocation/#limitations-and-considerations",
		"If indexes are created on columns commonly used in range-based queries (e.g. timestamp columns), it is recommended to explicitly configure these indexes with range sharding. This ensures efficient data access for range queries.\nBy default, YugabyteDB uses hash sharding for indexes, which distributes data randomly and is not ideal for range-based predicates potentially degrading query performance. Note that range sharding is enabled by default only in \u003ca class=\"highlight-link\" target=\"_blank\" href=\"https://docs.yugabyte.com/preview/develop/postgresql-compatibility/\"\u003ePostgreSQL compatibility mode\u003c/a\u003e in YugabyteDB.",
		"\u003ca class=\"highlight-link\" target=\"_blank\"  href=\"https://docs.yugabyte.com/preview/yugabyte-voyager/known-issues/#assessment-and-schema-analysis-limitations\"\u003eLimitations in assessment\u003c/a\u003e"
	]
}