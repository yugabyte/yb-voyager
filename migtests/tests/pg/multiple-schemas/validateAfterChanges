#!/usr/bin/env python3

import yb
import common

def main():
	test_type_flags = common.valparser()

	if test_type_flags['ff_enabled'] == 'true':
		change_expected_values()
		migration_completed_checks_yb()
		change_expected_values()
		migration_completed_checks_ff()
	elif test_type_flags['fb_enabled'] == 'true':
		change_expected_values()
		migration_completed_checks_yb()
		change_expected_values()
		migration_completed_checks_fb()
	else:
		migration_completed_checks_yb()


#=============================================================================

EXPECTED_ROW_COUNT = {
	'ext_test': 1,    
	'tt': 1,
	'audit': 5,
	'recipients': 2,    
	'session_log': 0
}
EXPECTED_TOTAL=15

EXPECTED_ROW_COUNT_SCHEMA2 = {
	'ext_test': 1,    
	'tt': 5,
	'audit': 5,
	'recipients': 3,    
	'session_log': 0
}
EXPECTED_TOTAL_SCHEMA2=25

EXPECTED_ROW_COUNT_FF = {
	'ext_test': 1,    
	'tt': 1,
	'audit': 6,
	'recipients': 2,    
	'session_log': 0
}
EXPECTED_TOTAL_FF=20

EXPECTED_ROW_COUNT_SCHEMA2_FF = {
	'ext_test': 1,    
	'tt': 6,
	'audit': 6,
	'recipients': 3,    
	'session_log': 0
}
EXPECTED_TOTAL_SCHEMA2_FF=35

def change_expected_values():

	global EXPECTED_TOTAL, EXPECTED_TOTAL_SCHEMA2

	for table_name, row_count in EXPECTED_ROW_COUNT_FF.items():
		EXPECTED_ROW_COUNT[table_name] = row_count

	for table_name, row_count in EXPECTED_ROW_COUNT_SCHEMA2_FF.items():
		EXPECTED_ROW_COUNT_SCHEMA2[table_name] = row_count
	
	EXPECTED_TOTAL = EXPECTED_TOTAL_FF
	EXPECTED_TOTAL_SCHEMA2 = EXPECTED_TOTAL_SCHEMA2_FF

def migration_completed_checks_yb():
	print("Running tests on YB")
	yb.run_checks(migration_completed_checks)
	
def migration_completed_checks_ff():
	print("Running tests on PG source replica")
	yb.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks_fb():
	print("Running tests on PG source")
	yb.run_checks(migration_completed_checks, db_type="source")

def check_validations_per_schema(tgt,schema_name):
	table_list = tgt.get_table_names(schema_name)
	print("table_list:", table_list)
	assert len(table_list) == 7 

	got_row_count = tgt.row_count_of_all_tables(schema_name)
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]

	fetched_triggers = tgt.fetch_all_triggers(schema_name)
	print(f"fetched triggers list - {fetched_triggers}")
	assert fetched_triggers == ["audit_trigger",]

	fetched_procedures_functions = tgt.fetch_all_procedures(schema_name)
	# Filter out pg_stat_statements related functions
	fetched_procedures_functions = [func for func in fetched_procedures_functions if not func.startswith('pg_stat_statements')]
	print(f"count of fetched procedures/functions - {len(fetched_procedures_functions)}")
	chk_conditions = (len(fetched_procedures_functions) == 40 and schema_name == 'schema2') or (len(fetched_procedures_functions) == 4 and schema_name == 'public')
	assert chk_conditions == True

	res_total_proc = tgt.execute_query(f"select total();")
	print(f"result of total() - {res_total_proc}")
	assert res_total_proc == EXPECTED_TOTAL

	res_aggregate_inc_sum = tgt.execute_query("select inc_sum(110);")
	print(f"result of aggregate of inc_sum(110) - {res_aggregate_inc_sum}")
	assert res_aggregate_inc_sum == 120

	fetched_extension = tgt.execute_query("SELECT extname FROM pg_extension where extname='pgcrypto';")
	print(f"fetched extension for extname - {fetched_extension}")
	assert fetched_extension == 'pgcrypto'

	chk_executed_query = tgt.run_query_and_chk_error("call tt_insert_data(6);", None)
	print(f"error in executing query - {chk_executed_query}")
	assert chk_executed_query == False

	#after calling tt_insert_data() functions inserts happen on tt and audit table
	cnt_tt = tgt.get_row_count("tt", schema_name)
	print(f"after running the procedure to insert into tt table, row count - {cnt_tt}")
	assert cnt_tt == EXPECTED_ROW_COUNT["tt"]+1

	cnt_audit = tgt.get_row_count("audit", schema_name)
	print(f"after running the procedure to insert into audit table, row count of audit- {cnt_audit}")
	assert cnt_audit == EXPECTED_ROW_COUNT["audit"]+1

	#checking the total again with changed value
	res_total_proc = tgt.execute_query("select total();")
	print(f"result of total() - {res_total_proc}")
	assert res_total_proc == EXPECTED_TOTAL+6


def migration_completed_checks(tgt):

	check_validations_per_schema(tgt, "public")

	QUERY_CHK_TYPES_DOMAINS = "select count(typname) from pg_type where typname in ('enum_kind', 'item_details', 'person_name');"
	cnt_type_domain = tgt.execute_query(QUERY_CHK_TYPES_DOMAINS)
	print(f"count returned - {cnt_type_domain}")
	assert cnt_type_domain == 6

	SET_SCHEMA_SEARCH_PATH_QUERY = "set search_path to schema2;"
	chk_error_execute_set_schema = tgt.run_query_and_chk_error(SET_SCHEMA_SEARCH_PATH_QUERY, None)
	print(f"error in executing the set searchpath query - {chk_error_execute_set_schema}")
	assert chk_error_execute_set_schema == False

	schema_set = tgt.execute_query("show search_path;")
	print(f"schema set in search_path - {schema_set}")
	assert schema_set == 'schema2'

	global EXPECTED_TOTAL

	for table_name, row_count in EXPECTED_ROW_COUNT_SCHEMA2.items():
		EXPECTED_ROW_COUNT[table_name] = row_count
	
	EXPECTED_TOTAL = EXPECTED_TOTAL_SCHEMA2

	check_validations_per_schema(tgt, "schema2")

	INSERT_QUERY_EXT_TEST = "insert into ext_test(password) values (crypt('tomspassword', gen_salt('bf')));"
	chk_insert_error_ext_test = tgt.run_query_and_chk_error(INSERT_QUERY_EXT_TEST, None)
	print(f"error in inserting in ext_test - {chk_insert_error_ext_test}")
	assert chk_insert_error_ext_test == False

	cnt_ext_test = tgt.get_row_count("ext_test", "schema2")
	print(f"after running the procedure to insert into ext_test table, row count- {cnt_ext_test}")
	assert cnt_ext_test == 2

	QUERY_TO_CHECK_PASSWORD_OF_ID = "select id from ext_test where password = crypt('johnspassword', password);"
	id_returned_ext_test = tgt.execute_query(QUERY_TO_CHECK_PASSWORD_OF_ID)
	print(f"id returned for password(johnspassword) - {id_returned_ext_test}")
	assert id_returned_ext_test == 1
	
if __name__ == "__main__":
	main()
