#!/usr/bin/env python3

import yb
import common

live_migration = 'false'
def main():
	global test_type_flags
	test_type_flags = common.valparser()
	global live_migration
	live_migration = test_type_flags['live_migration']
	if live_migration == 'true':
		change_expected_values_for_live_migration()
	migration_completed_checks_yb()

	if test_type_flags['ff_enabled'] == 'true':
		migration_completed_checks_ff()
	
	if test_type_flags['fb_enabled'] == 'true':
		migration_completed_checks_fb()

#=============================================================================

EXPECTED_ROW_COUNT = {
	'ext_test': 1,    
	'tt': 4,
	'audit': 4,
	'recipients': 1,    
	'session_log': 0,
	'Mixed_Case_Table_Name_Test': 5,
	'group':5
}

def migration_completed_checks_yb():
	print("Running tests on YB")
	yb.run_checks(migration_completed_checks)
	yb.run_checks(YB_specific_checks)

def YB_specific_checks(tgt):
	yb.verify_colocation(tgt, "postgresql")

def migration_completed_checks_ff():
	print("Running tests on PG source replica")
	yb.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks_fb():
	print("Running tests on PG source")
	yb.run_checks(migration_completed_checks, db_type="source")

def check_validations_per_schema(tgt,schema_name):
	table_list = tgt.get_table_names(schema_name)
	print("table_list:", table_list)
	assert len(table_list) == 7 

	got_row_count = tgt.row_count_of_all_tables(schema_name)
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]

	fetched_triggers = tgt.fetch_all_triggers(schema_name)
	print(f"fetched triggers list - {fetched_triggers}")
	assert fetched_triggers == ["audit_trigger",]

	fetched_procedures_functions = tgt.fetch_all_procedures(schema_name)
	print(f"count of fetched procedures/functions - {len(fetched_procedures_functions)}")
	chk_conditions = (len(fetched_procedures_functions) == 40 and schema_name == 'schema2') or (len(fetched_procedures_functions) == 4 and schema_name == 'public')
	assert chk_conditions == True

	res_total_proc = tgt.execute_query(f"select total();")
	print(f"result of total() - {res_total_proc}")
	assert res_total_proc == 20

	res_aggregate_inc_sum = tgt.execute_query("select inc_sum(110);")
	print(f"result of aggregate of inc_sum(110) - {res_aggregate_inc_sum}")
	assert res_aggregate_inc_sum == 120

	fetched_extension = tgt.execute_query("SELECT extname FROM pg_extension where extname='pgcrypto';")
	print(f"fetched extension for extname - {fetched_extension}")
	assert fetched_extension == 'pgcrypto'

	# don't want to insert anything in case of live migration
	if not live_migration == 'true':

		chk_executed_query = tgt.run_query_and_chk_error("call tt_insert_data(5);", None)
		print(f"error in executing query - {chk_executed_query}")
		assert chk_executed_query == False

		#after calling tt_insert_data() functions inserts happen on tt and audit table
		cnt_tt = tgt.get_row_count("tt", schema_name)
		print(f"after running the procedure to insert into tt table, row count - {cnt_tt}")
		assert cnt_tt == 5

		cnt_audit = tgt.get_row_count("audit", schema_name)
		print(f"after running the procedure to insert into audit table, row count of audit- {cnt_audit}")
		assert cnt_audit == 5

		#checking the total again with changed value
		res_total_proc = tgt.execute_query("select total();")
		print(f"result of total() - {res_total_proc}")
		assert res_total_proc == 25



def migration_completed_checks(tgt):
	global test_type_flags
	check_validations_per_schema(tgt, "public")

	QUERY_CHK_TYPES_DOMAINS = "select count(typname) from pg_type where typname in ('enum_kind', 'item_details', 'person_name');"
	cnt_type_domain = tgt.execute_query(QUERY_CHK_TYPES_DOMAINS)
	print(f"count returned - {cnt_type_domain}")
	assert cnt_type_domain == 6

	SET_SCHEMA_SEARCH_PATH_QUERY = "set search_path to schema2;"
	chk_error_execute_set_schema = tgt.run_query_and_chk_error(SET_SCHEMA_SEARCH_PATH_QUERY, None)
	print(f"error in executing the set searchpath query - {chk_error_execute_set_schema}")
	assert chk_error_execute_set_schema == False

	schema_set = tgt.execute_query("show search_path;")
	print(f"schema set in search_path - {schema_set}")
	assert schema_set == 'schema2'

	check_validations_per_schema(tgt, "schema2")

	# in live migration, sequences are only applied at cutover.
	if not live_migration == 'true':
		INSERT_QUERY_EXT_TEST = "insert into ext_test(password) values (crypt('tomspassword', gen_salt('bf')));"
		chk_insert_error_ext_test = tgt.run_query_and_chk_error(INSERT_QUERY_EXT_TEST, None)
		print(f"error in inserting in ext_test - {chk_insert_error_ext_test}")
		assert chk_insert_error_ext_test == False

		cnt_ext_test = tgt.get_row_count("ext_test", "schema2")
		print(f"after running the procedure to insert into ext_test table, row count- {cnt_ext_test}")
		assert cnt_ext_test == 2

	QUERY_TO_CHECK_PASSWORD_OF_ID = "select id from ext_test where password = crypt('johnspassword', password);"
	id_returned_ext_test = tgt.execute_query(QUERY_TO_CHECK_PASSWORD_OF_ID)
	print(f"id returned for password(johnspassword) - {id_returned_ext_test}")
	assert id_returned_ext_test == 1
	
	if not test_type_flags['ff_enabled'] == 'true' and not test_type_flags['fb_enabled'] == 'true':
		print("Validating the yb supported extensions list:")
		expectedExtensions = ["adminpack", "amcheck", "autoinc", "bloom", "btree_gin", "btree_gist", "citext", "cube",
			"dblink", "dict_int", "dict_xsyn", "earthdistance", "file_fdw", "fuzzystrmatch", "hll", "hstore",
			"hypopg", "insert_username", "intagg", "intarray", "isn", "lo", "ltree", "moddatetime",
			"orafce", "pageinspect", "pg_buffercache", "pg_cron", "pg_freespacemap", "pg_hint_plan", "pg_prewarm", "pg_stat_monitor",
			"pg_stat_statements", "pg_trgm", "pg_visibility", "pgaudit", "pgcrypto", "pgrowlocks", "pgstattuple", "plpgsql",
			"postgres_fdw", "refint", "seg", "sslinfo", "tablefunc", "tcn", "timetravel", "tsm_system_rows",
			"tsm_system_time", "unaccent", "uuid-ossp", "yb_pg_metrics", "yb_test_extension" ]
		extensions = tgt.get_available_extensions()
		print(f"expected extensions: {expectedExtensions}")
		print(f"reported extensions: {extensions}")
		tgtVersion = tgt.get_target_version()
		print(f"target version: {tgtVersion}")
		if "2.16" in tgtVersion:
			expectedExtensions.remove("hll")
		for extension in expectedExtensions:
			assert extension in extensions, f"expected extension is not reported: {extension}"
	
def change_expected_values_for_live_migration():
	del EXPECTED_ROW_COUNT["Mixed_Case_Table_Name_Test"]
	del EXPECTED_ROW_COUNT["group"]

if __name__ == "__main__":
	main()
