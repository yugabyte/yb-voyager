#!/usr/bin/env python3

import yb
import common

#=============================================================================

EXPECTED_ROW_COUNT = {
	"public.boston":       		334,
 	"public.cust_active":		751, 
  	"public.cust_arr_small":	499,
	"public.cust_arr_large":	252,
 	"public.cust_other":   		251,
	"public.cust_part11":  		272,
	"public.cust_part12":  		227,
	"public.cust_part21":  		126,
	"public.cust_part22":  		126,
	"public.customers": 		1002,
	"public.emp":        		1000,
 	"public.emp_0":        		324,
	"public.emp_1":        		334,
	"public.emp_2":        		342,
	"public.london":       		334,
 	"public.sales":        		1001,	
  	"public.sales_2019_q4":		334,
	"public.sales_2020_q1":		334,
	"public.sales_2020_q2":		333,
 	"public.sales_region":		1000,
  	"public.sydney": 			332,
	"p1.sales_region":			1000,
	"public.range_columns_partition_test": 8,
	"public.range_columns_partition_test_p0": 3,
	"public.range_columns_partition_test_p1": 5,
	"public.test_partitions_sequences" : 1000,
	"public.test_partitions_sequences_l": 334,
	"public.test_partitions_sequences_s":332,
	"public.test_partitions_sequences_b":334
}


EXPECTED_ROW_COUNT_FF = {
	"public.boston":       		335,
 	"public.cust_active":		752, 
  	"public.cust_arr_small":	498,
	"public.cust_arr_large":	254,
 	"public.cust_other":   		252,
	"public.cust_part11":  		271,
	"public.cust_part12":  		227,
	"public.cust_part21":  		127,
	"public.cust_part22":  		127,
	"public.customers": 		1004,
	"public.emp":        		1000,
 	"public.emp_0":        		323,
	"public.emp_1":        		335,
	"public.emp_2":        		342,
	"public.london":       		333,
 	"public.sales":        		1002,	
  	"public.sales_2019_q4":		335,
	"public.sales_2020_q1":		334,
	"public.sales_2020_q2":		333,
 	"public.sales_region":		1000,
  	"public.sydney": 			332,
	"p1.sales_region":			1000,
	"public.range_columns_partition_test": 10,
	"public.range_columns_partition_test_p0": 3,
	"public.range_columns_partition_test_p1": 7,
	"public.test_partitions_sequences" : 1000,
	"public.test_partitions_sequences_l": 333,
	"public.test_partitions_sequences_s":332,
	"public.test_partitions_sequences_b":335
}


TABLE_NAME_TO_PARTITION_COUNT = {
	"public.sales_region": 3,
	"public.test_partitions_sequences":3,
	"p1.sales_region": 3,
	"public.sales": 3,
	"public.range_columns_partition_test": 2,
	"public.emp": 3,
	"public.customers": 2
}


INSERT_QUERIES_INTO_TABLE_VERIFY_PARTITION = {
	"List" : {
		"insert_query": "INSERT INTO sales_region  (id, amount, branch, region) VALUES (1005, 2000, 'Branch 1001','Sydney') ",
		"delet_query": "DELETE FROM sales_region WHERE id = 1005",
		"partition_table_name": "sydney",
		"schema_name": "public"
	},
	"List" : {
		"insert_query": "INSERT INTO test_partitions_sequences  (amount, branch, region) VALUES (200025, 'Branch 1001','Sydney') ",
		"delet_query": "DELETE FROM test_partitions_sequences WHERE amount = 200025",
		"partition_table_name": "test_partitions_sequences_s",
		"schema_name": "public"
	},
	"List_partitions_in_different_schema" : {
		"insert_query": "INSERT INTO p1.sales_region  (id, amount, branch, region) VALUES (1005, 2000, 'Branch 1001','Sydney') ",
		"delet_query": "DELETE FROM p1.sales_region WHERE id = 1005",
		"partition_table_name": "sydney_region",
		"schema_name": "p2"
	},
	"Range" : {
		"insert_query": "INSERT INTO sales(id, p_name, amount, sale_date) VALUES (1005, 'Person 1001', 5000, '2020-01-04 00:00:00')",
		"delet_query": "DELETE FROM sales WHERE id = 1005",
		"partition_table_name": "sales_2020_q1",
		"schema_name": "public"
	},
	"Range_Column" : {
		"insert_query": "INSERT INTO range_columns_partition_test VALUES (7,7)",
		"delet_query": "DELETE FROM range_columns_partition_test WHERE id = 7",
		"partition_table_name": "range_columns_partition_test_p1",
		"schema_name": "public"
	},
	"Hash" : {
		"insert_query": "INSERT INTO emp VALUES(1021, 'user_1001', 49)",
		"delet_query": "DELETE FROM emp WHERE id = 1021",
		"partition_table_name": "emp_1",
		"schema_name": "public"
	},
	"Multilevel" : {
		"insert_query": "INSERT INTO customers (id, statuses, arr) VALUES(1011, 'RECURRING', 282)",
		"delet_query": "DELETE FROM customers WHERE id = 1011",
		"partition_table_name": "cust_part21",
		"schema_name": "public"
	}
}

# This is for the case when partitions are changed on target, for YB and PG this table is with different partition names

EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS = {}

EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_YB = {
	"p2.boston_region":    			334,
	"p2.london_region":    			334,
	"p2.sydney_region":    			332,
}

EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_PG = {
	"p2.boston":    			334,
	"p2.london":    			334,
	"p2.sydney":    			332,
}

EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_YB_FF = {
	"p2.boston_region":    			335,
	"p2.london_region":    			334,
	"p2.sydney_region":    			331,
}

EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_PG_FF = {
	"p2.boston":    			335,
	"p2.london":    			334,
	"p2.sydney":    			331,
}

def main():
	test_type_flags = common.valparser()

	if test_type_flags['ff_enabled'] == 'true' or test_type_flags['fb_enabled'] == 'true':
		change_expected_values()

	migration_completed_checks_yb()

	if test_type_flags['ff_enabled'] == 'true':
		migration_completed_checks_ff()

	if test_type_flags['fb_enabled'] == 'true':
		migration_completed_checks_fb()

def migration_completed_checks_yb():
	for table_name, row_count in EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_YB.items():
		EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS[table_name] = row_count
	print("Running tests on YB")
	yb.run_checks(migration_completed_checks)

def migration_completed_checks_ff():
	print("Running tests on PG source replica")
	update_expected_values_for_pg()
	yb.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks_fb():
	print("Running tests on PG source")
	update_expected_values_for_pg()
	yb.run_checks(migration_completed_checks, db_type="source")


def update_expected_values_for_pg():
    # Copy expected row counts from PG-specific source to general structure
	for table_name, row_count in EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_PG.items():
		EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS[table_name] = row_count

	# Update partition table name from p2.sydney_region to p2.sydney
	for _, query_and_partition_name in INSERT_QUERIES_INTO_TABLE_VERIFY_PARTITION.items():
		if query_and_partition_name['schema_name'] == 'p2':
			query_and_partition_name['partition_table_name'] = 'sydney'

def change_expected_values():
	for table_name, row_count in EXPECTED_ROW_COUNT_FF.items():
		EXPECTED_ROW_COUNT[table_name] = row_count

	for table_name, row_count in EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_YB_FF.items():
		EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_YB[table_name] = row_count

	for table_name, row_count in EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_PG_FF.items():
		EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS_PG[table_name] = row_count

def migration_completed_checks(tgt):
	table_list = tgt.get_table_names("public")
	print("table_list:", table_list)
	assert len(table_list) == 28
 
	table_list = tgt.get_table_names("p1")
	print("table_list:", table_list)
	assert len(table_list) == 1
 
	table_list = tgt.get_table_names("p2")
	print("table_list:", table_list)
	assert len(table_list) == 3

	for table_name, expected_row_count in EXPECTED_ROW_COUNT.items():
		schema = table_name.split(".")[0]
		table = table_name.split(".")[1]
		actual_row_count = tgt.get_row_count(table, schema)
		print(f"table_name: {table_name}, expected row_count: {expected_row_count}, target row_count: {actual_row_count}")
		assert expected_row_count == actual_row_count
  		
    	# check whether all the indexes on a table are valid
		print(f"checking all indexes valid on table: {table_name} are valid")
		assert tgt.invalid_index_present(table, schema) == False

	for table_name, expected_row_count in EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS.items():
		schema = table_name.split(".")[0]
		table = table_name.split(".")[1]
		actual_row_count = tgt.get_row_count(table, schema)
		print(f"table_name: {table_name}, expected row_count: {expected_row_count}, target row_count: {actual_row_count}")
		assert expected_row_count == actual_row_count
  		
    	# check whether all the indexes on a table are valid
		print(f"checking all indexes valid on table: {table_name} are valid")
		assert tgt.invalid_index_present(table, schema) == False
		

	for parent_table, count_partitions in TABLE_NAME_TO_PARTITION_COUNT.items():
		schema = parent_table.split(".")[0]
		table = parent_table.split(".")[1]
		partitions_returned = tgt.fetch_partitions(table, schema)
		print(f"count of partitions on {parent_table} : {partitions_returned}")
		assert partitions_returned == count_partitions

	for type, query_and_partition_name in INSERT_QUERIES_INTO_TABLE_VERIFY_PARTITION.items():
		print(f"Running the check for Partition type - {type}")
		insert_query = query_and_partition_name['insert_query']
		delete_query = query_and_partition_name['delete_query']
		partition_table_name = query_and_partition_name['partition_table_name']
		schema_name = query_and_partition_name['schema_name']
		run_insert_query_and_chk_incr_cnt_of_partition_table(tgt, insert_query, delete_query, partition_table_name, schema_name)

def run_insert_query_and_chk_incr_cnt_of_partition_table(tgt, insert_query, delete_query, partition_table_name, schema_name):
	chk_error_returned = tgt.run_query_and_chk_error(insert_query, None)
	print(f"error returned while insert ({insert_query}) query - {chk_error_returned}")
	assert chk_error_returned == False

	count_partition_table = tgt.get_row_count(partition_table_name, schema_name)
	print(f"count returned for partition ({partition_table_name}) - {count_partition_table} ")
	full_partition_name_with_schema_name = f"{schema_name}.{partition_table_name}"
	if full_partition_name_with_schema_name in EXPECTED_ROW_COUNT:
		assert count_partition_table == EXPECTED_ROW_COUNT[full_partition_name_with_schema_name] + 1
	else:
		assert count_partition_table == EXPECTED_ROW_COUNT_P1_SALES_REGION_PARTITIONS[full_partition_name_with_schema_name] + 1

	# Revert the change by deleting the inserted row
	chk_error_returned = tgt.run_query_and_chk_error(delete_query, None)
	print(f"error returned while delete ({delete_query}) query - {chk_error_returned}")
	assert chk_error_returned == False

if __name__ == "__main__":
	main()