#!/usr/bin/env python3

import yb

def main():
    yb.run_checks(migration_completed_checks)
    yb.run_checks(YB_specific_checks)

#=============================================================================

EXPECTED_ROW_COUNT = {}
EXPECTED_ROW_COUNT['public'] = {
	'sequence_check1': 2,
	'sequence_check2': 7,
	'sequence_check3': 3,
    'multiple_identity_columns': 2,
    'multiple_serial_columns': 2,
    'foo': 2,
    'bar': 2,
    'foo_bar': 2,
    'Case_Sensitive_Seq': 2,
    'sales_region' : 1000,
    'boston' : 334,
    'sydney': 333,
    'london': 333,
    'users': 3
}

EXPECTED_ROW_COUNT['schema1'] = {
	'sequence_check1': 1,
	'sequence_check2': 6,
	'sequence_check3': 2,
    'multiple_identity_columns': 2,
    'multiple_serial_columns': 2,
}

EXPECTED_ROW_COUNT['schema2'] = {
    'foo': 2,
    'bar': 2,
}

EXPECTED_ROW_COUNT['schema3'] = {
    'foo': 2,
}

EXPECTED_ROW_COUNT['schema4'] = {
    'bar': 2,
}

EXPECTED_TABLE_SUM = {}
EXPECTED_TABLE_SUM['public'] = {
	'sequence_check1': 3,
	'sequence_check2': 28,
	'sequence_check3': 6,
    'multiple_identity_columns': 3,
    'multiple_serial_columns': 3,
    'foo': 4,
    'bar': 6,
    'foo_bar': 4, # two columns with same sequence used
    '"Case_Sensitive_Seq"': 3,
    'sales_region' : 500500
}

EXPECTED_TABLE_SUM['schema1'] = {
	'sequence_check1': 1,
	'sequence_check2': 21,
	'sequence_check3': 3,
    'multiple_identity_columns': 3,
    'multiple_serial_columns': 3,
}

EXPECTED_TABLE_SUM['schema2'] = {
    'foo': 4,
    'bar': 6,
}

EXPECTED_TABLE_SUM['schema3'] = {
    'foo': 4,
}

EXPECTED_TABLE_SUM['schema4'] = {
    'bar': 6,
}

NUM_TABLES = {
    'public': 14,
    'schema1': 5,
    'schema2': 2,
    'schema3': 1,
    'schema4': 1
}

NUM_SEQUENCES = {
    'public': 4+3+1+2+1, # 2 are implicit because of serial/generated columns
    'schema1': 1+3, # 3 are implicit because of serial/generated columns
    'schema2': 1+1,
    'schema3': 1+1,
    'schema4': 0+1,
}

def YB_specific_checks(tgt):
    yb.verify_colocation(tgt, "postgresql")

def migration_completed_checks_per_schema(tgt, schema):
    print("check for schema: ", schema)
    table_list = tgt.count_tables(schema)
    print(f"actual table_list: {table_list}, expected num_tables: {NUM_TABLES[schema]}")
    assert table_list == NUM_TABLES[schema]
    
    num_sequences = tgt.count_sequences(schema)
    print(f"actual number_sequences: {num_sequences}, expected num_sequences: {NUM_SEQUENCES[schema]}")
    assert num_sequences == NUM_SEQUENCES[schema]
    
    got_row_count = tgt.row_count_of_all_tables(schema)
    for table_name, row_count in EXPECTED_ROW_COUNT[schema].items():
        print(f"table_name: {table_name}, got_row_count: {got_row_count[table_name]}, expected_row_count: {row_count}")
        assert row_count == got_row_count[table_name]
        
    for table_name, sum_column_values in EXPECTED_TABLE_SUM[schema].items():
        got_sum_column_values = tgt.get_sum_of_column_of_table(table_name, "id", schema)
        print(f"table_name: {table_name}, got_sum_column_values: {got_sum_column_values}, expected_sum_column_values: {sum_column_values}")
        assert sum_column_values == got_sum_column_values
    
    # this validation check has been as added for issue - https://github.com/yugabyte/yb-voyager/issues/632
    SEQUENCE_NAMES = ["sequence_check1_id_seq", "sequence_check2_id_seq", "sequence_check3_id_seq", "schema1.sequence_check1_id_seq", 
                        "schema1.sequence_check2_id_seq", "schema1.sequence_check3_id_seq", "multiple_identity_columns_id_seq", 
                        "multiple_serial_columns_id_seq", "schema1.multiple_identity_columns_id_seq", "schema1.multiple_serial_columns_id_seq",'"Case_Sensitive_Seq_id_seq"', 'sales_region_id_seq']
    SEQUENCE_OWNER_COLUMNS = ["sequence_check1.id", "sequence_check2.id", "sequence_check3.id", "schema1.sequence_check1.id", 
                                "schema1.sequence_check2.id", "schema1.sequence_check3.id", "multiple_identity_columns.id",
                                "multiple_serial_columns.id", "schema1.multiple_identity_columns.id", "schema1.multiple_serial_columns.id", '"Case_Sensitive_Seq".id','sales_region.id']
    
    for i in range(len(SEQUENCE_NAMES)):
        FETCH_SEQUENCE_OWNER_QUERY = f"""SELECT CONCAT(d.refobjid::regclass, '.', a.attname) AS owner_column
        FROM   pg_depend    d
        JOIN   pg_attribute a ON a.attrelid = d.refobjid
        AND a.attnum   = d.refobjsubid
        WHERE  d.objid = '{SEQUENCE_NAMES[i]}'::regclass
        AND    d.refobjsubid > 0
        AND    d.classid = 'pg_class'::regclass"""
        FETCHED_SEQUENCE_OWNER_COLUMN = tgt.execute_query(FETCH_SEQUENCE_OWNER_QUERY)
        
        print(f"fetched owner column of sequence {SEQUENCE_NAMES[i]} is: {SEQUENCE_OWNER_COLUMNS[i]}, expected owner: {FETCHED_SEQUENCE_OWNER_COLUMN}")
        assert FETCHED_SEQUENCE_OWNER_COLUMN == SEQUENCE_OWNER_COLUMNS[i]

def migration_completed_checks_for_sequences_per_schema(tgt, schema):
    INSERT_SEQUENCE_QUERY = f"insert into {schema}.sequence_check3 (name) values ('Yugabyte');"
    insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, None)
    print(f"insert query returned for {schema}.sequence_check3 - {insert_query_chk_error}")
    assert insert_query_chk_error == False
    
    
    SELECT_ID_QUERY = f"select id from {schema}.sequence_check3 where name = 'Yugabyte';"
    id_returned = tgt.execute_query(SELECT_ID_QUERY)
    expected_id = EXPECTED_ROW_COUNT[schema]['sequence_check3'] + 1
    print(f"for sequence_check3, Id returned- {id_returned} and expected id - {expected_id}")
    assert id_returned == expected_id

def migration_completed_checks_for_sequences_partitions(tgt):
    INSERT_SEQUENCE_QUERY = f"insert into sales_region(amount, region) values(100021, 'London')"
    insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, None)
    print(f"insert query returned for public.sales_region - {insert_query_chk_error}")
    assert insert_query_chk_error == False
    
    
    SELECT_ID_QUERY = f"select id from sales_region where amount = 100021;"
    id_returned = tgt.execute_query(SELECT_ID_QUERY)
    expected_id = EXPECTED_ROW_COUNT['public']['sales_region'] + 1
    print(f"for sequence_check3, Id returned- {id_returned} and expected id - {expected_id}")
    assert id_returned == expected_id

def migration_completed_checks_for_sequences_attached_to_multiple_table_columns(tgt):
    UNIQUE_CONSTRAINT_ERROR_CODE = 23505
    INSERT_SEQUENCE_QUERY = f"insert into public.foo(value) values('TEST')"
    insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, UNIQUE_CONSTRAINT_ERROR_CODE)
    print(f"insert query returned for public.foo - {insert_query_chk_error}")
    assert insert_query_chk_error == False

    SELECT_ID_QUERY = f"select id from public.foo where value = 'TEST';"
    id_returned = tgt.execute_query(SELECT_ID_QUERY)
    expected_id = EXPECTED_ROW_COUNT['public']['foo'] +  EXPECTED_ROW_COUNT['public']['bar'] + 1
    print(f"for public.foo, Id returned- {id_returned} and expected id - {expected_id}")
    assert id_returned == expected_id

    INSERT_SEQUENCE_QUERY = f"insert into public.bar(value) values('2024-06-10')"
    insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, UNIQUE_CONSTRAINT_ERROR_CODE)
    print(f"insert query returned for public.bar - {insert_query_chk_error}")
    assert insert_query_chk_error == False

    SELECT_ID_QUERY = f"select id from public.bar where value = '2024-06-10';"
    id_returned = tgt.execute_query(SELECT_ID_QUERY)
    expected_id = EXPECTED_ROW_COUNT['public']['foo'] +  EXPECTED_ROW_COUNT['public']['bar'] + 2
    print(f"for bar, Id returned- {id_returned} and expected id - {expected_id}")
    assert id_returned == expected_id
    
    INSERT_SEQUENCE_QUERY = f"insert into schema3.foo(value) values('TEST2')"
    insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, UNIQUE_CONSTRAINT_ERROR_CODE)
    print(f"insert query returned for schema3.foo - {insert_query_chk_error}")
    assert insert_query_chk_error == False

    SELECT_ID_QUERY = f"select id from schema3.foo where value = 'TEST2';"
    id_returned = tgt.execute_query(SELECT_ID_QUERY)
    expected_id = EXPECTED_ROW_COUNT['schema3']['foo'] + EXPECTED_ROW_COUNT['schema4']['bar'] + 1
    print(f"for schema3.foo, Id returned- {id_returned} and expected id - {expected_id}")
    assert id_returned == expected_id

    INSERT_SEQUENCE_QUERY = f"insert into schema4.bar(value) values('2024-05-22')"
    insert_query_chk_error = tgt.run_query_and_chk_error(INSERT_SEQUENCE_QUERY, UNIQUE_CONSTRAINT_ERROR_CODE)
    print(f"insert query returned for schema4.bar - {insert_query_chk_error}")
    assert insert_query_chk_error == False

    SELECT_ID_QUERY = f"select id from schema4.bar where value = '2024-05-22';"
    id_returned = tgt.execute_query(SELECT_ID_QUERY)
    expected_id = EXPECTED_ROW_COUNT['schema3']['foo'] + EXPECTED_ROW_COUNT['schema4']['bar'] + 2
    print(f"for schema4.bar, Id returned- {id_returned} and expected id - {expected_id}")
    assert id_returned == expected_id


EXPECTED_SEQUENCE_VALUES_NOT_ATTACHED_TO_COLUMNS = {
    'public.seq1':2,
    'schema2.seq1':3,
    'schema3.seq1':5,
    'schema4.seq1':2,
}

def migration_completed_checks_for_sequences_not_attached_columns(tgt):
    for sequence, last_val in EXPECTED_SEQUENCE_VALUES_NOT_ATTACHED_TO_COLUMNS.items():
        NEXT_VAL_QUERY = f"SELECT pg_catalog.nextval('{sequence}');"
        val_returned = tgt.execute_query(NEXT_VAL_QUERY)
        #As we are not migrating the sequences not attached to the table columns hence it should return 1
        expected_val = 1
        print(f"for sequence - {sequence}, val returned- {val_returned} and expected val - {expected_val}")
        assert val_returned == expected_val


def migration_completed_checks(tgt):
    migration_completed_checks_per_schema(tgt, 'public')
    migration_completed_checks_per_schema(tgt, 'schema1')
    migration_completed_checks_per_schema(tgt, 'schema2')
    migration_completed_checks_per_schema(tgt, 'schema3')
    migration_completed_checks_per_schema(tgt, 'schema4')

    migration_completed_checks_for_sequences_per_schema(tgt, 'public')
    migration_completed_checks_for_sequences_per_schema(tgt, 'schema1')
    migration_completed_checks_for_sequences_attached_to_multiple_table_columns(tgt)
    migration_completed_checks_for_sequences_not_attached_columns(tgt)
    migration_completed_checks_for_sequences_partitions(tgt)

if __name__ == "__main__":
	main()