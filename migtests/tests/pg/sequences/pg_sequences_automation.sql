-- schema and tests for sequences in public and non-public schemas
-- cases including multiple identity and serial columns

drop table if exists sequence_check1;
create table sequence_check1 (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    primary key(id)
);

insert into sequence_check1(name, balance) values('def', 10000);

insert into sequence_check1(name, balance) values('abc', 10000);

drop table if exists sequence_check2;
create table sequence_check2 (
	id serial primary key,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(50),
	gender VARCHAR(50),
	ip_address VARCHAR(20)
);
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Modestine', 'MacMeeking', 'mmacmeeking0@zimbio.com', 'Female', '208.44.58.185');
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Genna', 'Kaysor', 'gkaysor1@hibu.com', 'Female', '202.48.51.58');
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Tess', 'Wesker', 'twesker2@scientificamerican.com', 'Female', '177.153.32.186');
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Magnum', 'Danzelman', 'mdanzelman3@storify.com', 'Bigender', '192.200.33.56');
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Mitzi', 'Pidwell', 'mpidwell4@shutterfly.com', 'Female', '216.4.250.71');
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Milzie', 'Rohlfing', 'mrohlfing5@java.com', 'Female', '230.101.87.42');
insert into sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Gena', 'Varga', 'gvarga6@mapquest.com', 'Female', '170.240.242.112');


CREATE SEQUENCE sequence_check3_id_seq;

drop table if exists sequence_check3;
CREATE TABLE sequence_check3 (
    id integer NOT NULL DEFAULT nextval('sequence_check3_id_seq'),
    name varchar(20)
);

ALTER SEQUENCE sequence_check3_id_seq OWNED BY sequence_check3.id;

insert into sequence_check3(name) values('abc');
insert into sequence_check3(name) values('abc');
insert into sequence_check3(name) values('abc');

drop table if exists multiple_identity_columns;
create table multiple_identity_columns (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    id2 int generated by default as identity,
    name2 varchar(100) not null,
    balance2 dec(15, 2) not null,
    primary key(id, id2)
);

insert into multiple_identity_columns(name, balance, name2, balance2) values('def', 10000, 'def', 10000);
insert into multiple_identity_columns(name, balance, name2, balance2) values('abc', 10000, 'abc', 10000);

drop table if exists multiple_serial_columns;
create table multiple_serial_columns (
    id serial,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    id2 serial,
    name2 varchar(100) not null,
    balance2 dec(15, 2) not null,
    primary key(id, id2)
);

insert into multiple_serial_columns(name, balance, name2, balance2) values('def', 10000, 'def', 10000);
insert into multiple_serial_columns(name, balance, name2, balance2) values('abc', 10000, 'abc', 10000);

create table "Case_Sensitive_Seq" (
    id serial,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    name2 varchar(100) not null,
    balance2 dec(15, 2) not null,
    primary key(id)
);

insert into "Case_Sensitive_Seq"(name, balance, name2, balance2) values('def', 10000, 'def', 10000);
insert into "Case_Sensitive_Seq"(name, balance, name2, balance2) values('abc', 10000, 'abc', 10000);


-- same as above but with schema
create schema schema1;

drop table if exists schema1.sequence_check1;
create table schema1.sequence_check1 (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    primary key(id)
);

insert into schema1.sequence_check1(name, balance) values('def', 10000);

drop table if exists schema1.sequence_check2;
create table schema1.sequence_check2 (
	id serial primary key,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(50),
	gender VARCHAR(50),
	ip_address VARCHAR(20)
);
insert into schema1.sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Modestine', 'MacMeeking', 'mmacmeeking0@zimbio.com', 'Female', '208.44.58.185');
insert into schema1.sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Genna', 'Kaysor', 'gkaysor1@hibu.com', 'Female', '202.48.51.58');
insert into schema1.sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Tess', 'Wesker', 'twesker2@scientificamerican.com', 'Female', '177.153.32.186');
insert into schema1.sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Magnum', 'Danzelman', 'mdanzelman3@storify.com', 'Bigender', '192.200.33.56');
insert into schema1.sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Mitzi', 'Pidwell', 'mpidwell4@shutterfly.com', 'Female', '216.4.250.71');
insert into schema1.sequence_check2 (first_name, last_name, email, gender, ip_address) values ('Milzie', 'Rohlfing', 'mrohlfing5@java.com', 'Female', '230.101.87.42');

CREATE SEQUENCE schema1.sequence_check3_id_seq;

drop table if exists schema1.sequence_check3;
CREATE TABLE schema1.sequence_check3 (
    id integer NOT NULL DEFAULT nextval('schema1.sequence_check3_id_seq'),
    name varchar(20)
);

ALTER SEQUENCE schema1.sequence_check3_id_seq OWNED BY schema1.sequence_check3.id;

insert into schema1.sequence_check3(name) values('abc');
insert into schema1.sequence_check3(name) values('abc');

drop table if exists schema1.multiple_identity_columns;
create table schema1.multiple_identity_columns (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    id2 int generated by default as identity,
    name2 varchar(100) not null,
    balance2 dec(15, 2) not null,
    primary key(id, id2)
);

insert into schema1.multiple_identity_columns(name, balance, name2, balance2) values('def', 10000, 'def', 10000);
insert into schema1.multiple_identity_columns(name, balance, name2, balance2) values('abc', 10000, 'abc', 10000);

drop table if exists schema1.multiple_serial_columns;
create table schema1.multiple_serial_columns (
    id serial,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    id2 serial,
    name2 varchar(100) not null,
    balance2 dec(15, 2) not null,
    primary key(id, id2)
);

insert into schema1.multiple_serial_columns(name, balance, name2, balance2) values('def', 10000, 'def', 10000);
insert into schema1.multiple_serial_columns(name, balance, name2, balance2) values('abc', 10000, 'abc', 10000);

-- Single Sequence attached to two columns of different table
create sequence baz;
create table foo(id bigint default nextval('baz'), value text);
create table bar(id bigint default nextval('baz'), value date);

insert into foo (value) values ('Hello');
insert into bar (value) values (now());
insert into foo (value) values ('World');
insert into bar (value) values (now());

-- Single Sequence attached to two columns of different table in non-public schema
create schema schema2;
create sequence schema2.baz;
create table schema2.foo(id bigint default nextval('schema2.baz'), value text);
create table schema2.bar(id bigint default nextval('schema2.baz'), value date);

insert into schema2.foo (value) values ('Hello');
insert into schema2.bar (value) values (now());
insert into schema2.foo (value) values ('World');
insert into schema2.bar (value) values (now());


-- Single Sequence attached to two columns of different table in different schemas
create schema schema3;
create schema schema4;
create sequence schema3.baz;
create table schema3.foo(id bigint default nextval('schema3.baz'), value text);
create table schema4.bar(id bigint default nextval('schema3.baz'), value date);

insert into schema3.foo (value) values ('Hello');
insert into schema4.bar (value) values (now());
insert into schema3.foo (value) values ('World');
insert into schema4.bar (value) values (now());

-- Single Sequence attached to two columns of a table
create sequence foo_bar_baz;
create table foo_bar(id bigint default nextval('foo_bar_baz'), value text, id2 bigint default nextval('foo_bar_baz'), value2 text);

insert into foo_bar (value, value2) values ('Hello', 'World');
insert into foo_bar (value, value2) values ('World', 'Hello');


CREATE TABLE sales_region (id serial, amount int, branch text, region text) PARTITION BY LIST (region);
CREATE TABLE London PARTITION OF sales_region FOR VALUES IN ('London');
CREATE TABLE Sydney PARTITION OF sales_region FOR VALUES IN ('Sydney');
CREATE TABLE Boston PARTITION OF sales_region FOR VALUES IN ('Boston');

WITH region_list AS (
     SELECT '{"London", "Boston", "Sydney"}'::TEXT[] region
     ), amount_list AS (
        SELECT '{1000, 2000, 5000}'::INT[] amount
        ) 
        INSERT INTO sales_region  
        (amount, branch, region) 
            SELECT 
                amount[1 + mod(n, array_length(amount, 1))], 
                'Branch ' || n as branch, 
                region[1 + mod(n, array_length(region, 1))] 
                    FROM amount_list, region_list, generate_series(1,1000) as n;

CREATE SEQUENCE user_code_seq
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE FUNCTION generate_user_code() RETURNS TEXT AS $$
DECLARE
    new_code TEXT;
BEGIN
    SELECT 'USR' || LPAD(nextval('user_code_seq')::TEXT, 4, '0') 
    INTO new_code;
    RETURN new_code;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    user_code TEXT UNIQUE,
    name TEXT
);

ALTER TABLE ONLY users ALTER COLUMN user_code SET DEFAULT nextval('public.user_code_seq'::regclass);

ALTER SEQUENCE public.user_code_seq OWNED BY public.users.user_code;

INSERT INTO users (user_code, name) 
VALUES (generate_user_code(), 'John Doe');

INSERT INTO users (user_code, name) 
VALUES (generate_user_code(), 'ABC');

INSERT INTO users (user_code, name) 
VALUES (generate_user_code(), 'XYZ');

SELECT * FROM users;
