<!DOCTYPE html>
<html>
<head>
    <title>Migration Assessment Report</title>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .wrapper {
            max-width: 70%;
            margin: 20px auto;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        h1, h2, h3 {
            color: #333;
        }

        /* Table Styles */
        table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
            table-layout: fixed;
            border-spacing: 0;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            vertical-align: middle;
            word-wrap: break-word;
            white-space: normal;
            box-sizing: border-box;
            margin: 0;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        th {
            background-color: #f2f2f2;
        }

        .formatted_table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        /* List Styles */
        ul {
            padding-left: 20px;
        }

        li {
            margin: 5px 0;
        }

        .scrollable-div {
            max-height: 300px;
            overflow-y: scroll;
            border: 1px solid #ccc; /* a visual separator from the body */
            padding: 10px;
            scrollbar-width: thin; /* Firefox */
            -ms-overflow-style: auto; /* IE 10+ */
        }

        .scrollable-div::-webkit-scrollbar {
            width: 8px;
            background: #f2f2f2;
        }

        .scrollable-div::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 4px;
        }

        .no-wrap-list li {
            white-space: nowrap;
            margin-right: 15px;
            list-style-type: disc;
        }

        /* Text and Alignment Styles */
        .centered-cell {
            text-align: center;
            vertical-align: middle;
        }

        #refer-p {
            font-size: 0.8em;
            color: inherit;
        }

        #refer-p a {
            color: inherit;
        }

        .list_item {
            margin-bottom: 15px;
        }

        pre, code {
            width: 100%;          /* Ensure content takes full width of container */
            margin: 0;            /* Remove default margins */
            padding: 8px;         /* Add consistent padding around code blocks */
            background: none;     /* Remove any background styling */
            border: none;         /* Remove any borders */
            white-space: pre-wrap;      /* CSS3: wrap as needed, preserve whitespace */
            word-break: break-word;     /* Break long words if needed */
            overflow-wrap: break-word;  /* Same as above, for newer browsers */
            box-sizing: border-box;     /* Include padding in element's total width */
        }

        /* Highlight Table Styles */
        .table-highlight {
            border-collapse: collapse;
            border-spacing: 0;
        }

        .table-highlight tr {
            height: auto;
            margin: 0;
            padding: 0;
        }

        .table-highlight td, .table-highlight th {
            height: 100%;
            min-height: 40px;
            vertical-align: middle;
            padding: 8px;
            box-sizing: border-box;
            border-bottom: none;
            margin: 0;
        }

        .summary-row {
            cursor: pointer;
            margin: 0;
        }

        .details-row {
            background-color: #fafafa;
            display: table-row;
            border-top: 1px solid #ddd;
            margin: 0;
        }

        .details-row > td {
            padding: 0;
            height: 0;
            overflow: hidden;
        }

        /* Details Content Animation */
        .details-content-wrapper {
            max-height: 0;
            overflow: hidden;
            visibility: hidden;
            opacity: 0;
            transition: max-height 0.3s ease-out, opacity 0.3s ease-out, visibility 0s linear 0.3s;
        }

        .details-row.show .details-content-wrapper {
            max-height: 1000px;
            visibility: visible;
            opacity: 1;
            transition: max-height 0.3s ease-in, opacity 0.3s ease-in, visibility 0s linear 0s;
        }

        .details-content {
            padding: 8px;
        }

        .table-highlight tbody {
            border-bottom: 2px solid #000;
            margin: 0;
            padding: 0;
        }

        .table-highlight tbody:last-child {
            border-bottom: none;
        }
        /* Container for the top summary + buttons */
        /* Header and Button Styles */
        .assessment-issues-header {
            display: flex;                /* enable flex layout */
            justify-content: space-between; /* pushes left content to one side, buttons to the other */
            align-items: center;            /* vertically center items */
            margin-bottom: 1rem;            /* space before the table */
        }

        .assessment-issues-header p {
            margin: 0;
            margin-bottom: 4px;
        }

        /* Container for the buttons on the right */
        .assessment-issues-header .buttons {
            display: flex;
            gap: 5px;
        }

        .rounded-button {
            padding: 6px 12px;
            border-radius: 9999px; /* pill shape */
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .rounded-button:hover {
            background-color: #eee;
        }

        .spaced-words {
            word-spacing: 0.2em;
        }

        /* Category and Arrow Styles */
        .category-cell-flex {
            display: flex;
            align-items: center;
            gap: 0.5em;
            height: 100%;
            padding-left: 0.5em;
            box-sizing: border-box;
            margin: 0;
        }

        .arrow-container {
            width: 1.2em;
            height: 1.2em;
            flex-shrink: 0;
            text-align: center;
            line-height: 1.2em;
            font-family: monospace;
        }
    </style>
    <script>

        const ISSUES_JS_INFO_IF_PERF_TABLE = {
            false: {                      // other assessment issues
                count: {{ len (filterOutPerformanceOptimizationIssues .Issues) }},
                details: 'details-',
                arrow:   'arrow-',
                expand:  'expandAllButton',
                collapse:'collapseAllButton'
            },
            true: {                       // performance optimisations
                count: {{ len (getPerformanceOptimizationIssues .Issues) }},
                details: 'details-perf-',
                arrow:   'arrow-perf-',
                expand:  'expandAllButton-perf',
                collapse:'collapseAllButton-perf'
            }
        };

        // Toggle Details Functionality
        function toggleDetails(detailsRowId, arrowId, isPerf) {
            const row = document.getElementById(detailsRowId);
            const arrow = document.getElementById(arrowId);
            if (row.classList.contains('show')) {
                row.classList.remove('show');
                arrow.innerHTML = "&#x25B6;"; // Right arrow (&#x25B6;) for collapsed
            } else {
                row.classList.add('show');
                arrow.innerHTML = "&#x25BC;"; // Down arrow (&#x25BC;) for expanded
            }
            updateButtonVisibility(isPerf);
        }

        // Expand All Issues
        function expandAllIssues(isPerf) {
            // Suppose each details row has an ID pattern "details-i" and an arrow with ID "arrow-i"
            let issuesJsInfo = ISSUES_JS_INFO_IF_PERF_TABLE[isPerf]
            for (let i = 0; i < issuesJsInfo.count; i++) {
               
                const row = document.getElementById(issuesJsInfo.details + i);
                const arrowId = document.getElementById(issuesJsInfo.arrow + i);
                if (!row.classList.contains('show')) {
                    row.classList.add('show');
                    arrowId.innerHTML = "&#x25BC;"; // Down triangle (&#9660;)
                }
            }
            updateButtonVisibility(isPerf);
        }

        // Collapse All Issues
        function collapseAllIssues(isPerf) {
            let issuesJsInfo = ISSUES_JS_INFO_IF_PERF_TABLE[isPerf]              
            for (let i = 0; i < issuesJsInfo.count; i++) {
                
                const row = document.getElementById(issuesJsInfo.details + i);
                const arrowId = document.getElementById(issuesJsInfo.arrow + i);
                if (row.classList.contains('show')) {
                    row.classList.remove('show');
                    arrowId.innerHTML = "&#x25B6;"; // Right triangle (&#x25B6;)
                }
            }
            updateButtonVisibility(isPerf);
        }

        // Update Button Visibility Based on Row States
        function updateButtonVisibility(isPerf) {
            let issuesJsInfo = ISSUES_JS_INFO_IF_PERF_TABLE[isPerf]                      
            let someExpanded = false;
            let someCollapsed = false;

            for (let i = 0; i < issuesJsInfo.count; i++) {
                const row = document.getElementById(issuesJsInfo.details + i);
                if (row.classList.contains('show')) {
                    someExpanded = true;
                } else {
                    someCollapsed = true;
                }
                if (someExpanded && someCollapsed) break;
            }

            const expandButton = document.getElementById(issuesJsInfo.expand);
            const collapseButton = document.getElementById(issuesJsInfo.collapse);
            expandButton.style.display = someCollapsed ? 'inline-block' : 'none';
            collapseButton.style.display = someExpanded ? 'inline-block' : 'none';
        }

        // Keep track of the current sort direction per field, so we can toggle it
        let sortState = {
            category: 'asc',
            name: 'asc',
            impact: 'asc'
        };

        function sortTableBy(field, isPerf) {
            // Grab the table element
            const table = document.querySelector(".table-highlight");

            // Collect all the .issue-pair <tbody> elements
            const issuePairs = Array.from(table.querySelectorAll("tbody.issue-summary-detail-pair"));

            // Determine the current sort direction and flip it
            let currentDirection = sortState[field] || 'asc';
            let newDirection = (currentDirection === 'asc') ? 'desc' : 'asc';
            sortState[field] = newDirection;

            issuePairs.sort((a, b) => {
                let aValue = a.dataset[field] || "";
                let bValue = b.dataset[field] || "";
                if (aValue < bValue) return newDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return newDirection === 'asc' ? 1 : -1;
                return 0;
            });

            // Re-append the sorted <tbody> elements to the table
            issuePairs.forEach(pair => table.appendChild(pair));

            // Update the sort indicator in the table header
            const sortIndicator = table.querySelector(`th[onclick="sortTableBy('${field}', isPerf)"] .sort-indicator`);
            if (sortIndicator) {
                sortIndicator.innerHTML = newDirection === 'asc' ? '&#8593;' : '&#8595;'; // &#8593; is up arrow, &#8595; is down arrow
            }
            updateButtonVisibility(isPerf);
        }

        function updateButtonVisibilities() {
            updateButtonVisibility(false);
            updateButtonVisibility(true);
        }
        // Initialize Button Visibility on Page Load
        window.onload = updateButtonVisibilities;

    </script>
</head>
<body>
    <div class="wrapper">
        <h1>Migration Assessment Report</h1>
        <p><strong>Voyager Version:</strong> {{ .VoyagerVersion }}</p>
        <p><strong>Database Name:</strong> {{ .SchemaSummary.DBName }}</p>
        {{ if .SchemaSummary.SchemaNames }}
            <p><strong>Schema Name:</strong>
            {{ range $i, $a := .SchemaSummary.SchemaNames }}
                {{ $a }}
            {{ end }}
            </p>
        {{ end }}
        {{ with .SchemaSummary.DBVersion }}
            <p><strong>Database Version:</strong> {{ . }}</p>
        {{ end }}

        <p><strong>Target YB Version:</strong> {{ .TargetDBVersion }}</p>

        {{ if ne .MigrationComplexity "NOT AVAILABLE" }}
            <p><strong>Migration Complexity:</strong> {{ .MigrationComplexity }}</p>
        {{ end }}

        <h2>Database Objects</h2>
        <p>{{ .SchemaSummary.Description }}</p>
        <table>
            <tr>
                <th class="centered-cell">Object Type</th>
                <th class="centered-cell">Total Objects</th>
                <th>Object Names</th>
            </tr>
            {{ range .SchemaSummary.DBObjects }}
            <tr>
                <td class="centered-cell">{{ .ObjectType }}</td>
                <td class="centered-cell">{{ .TotalCount }}</td>
                <td>
                    <div class="scrollable-div no-wrap-list">
                        <ul style="margin: 0; padding-left: 1.2em;">
                            {{ range split .ObjectNames ", " }}
                                <li>{{ . }}</li>
                            {{ end }}
                        </ul>
                    </div>
                </td>
            </tr>
            {{ end }}
        </table>

        {{ with .Sizing }}
            <h2>Sharding Recommendations</h2>
            {{ if eq .FailureReasoning "" }}
                {{ with .SizingRecommendation }}
                    <table>
                        <tr>
                            <th class="centered-cell">Colocated Tables</th>
                            <th class="centered-cell">Sharded Tables</th>
                        </tr>
                        <tr>
                            <td>
                                <div class="scrollable-div no-wrap-list">
                                    {{ range .ColocatedTables }}
                                        <li>{{ . }}</li>
                                    {{ end }}
                                </div>
                            </td>
                            <td>
                                <div class="scrollable-div no-wrap-list">
                                    {{ range .ShardedTables }}
                                        <li>{{ . }}</li>
                                    {{ end }}
                                </div>
                            </td>
                        </tr>
                    </table>
                    <h2>Sizing Recommendations</h2>
                    <table>
                        <tr>
                            <th class="centered-cell">Parameter</th>
                            <th class="centered-cell">Recommendation</th>
                        </tr>
                        <tr><td class="centered-cell">Num of Nodes</td><td class="centered-cell">{{ .NumNodes }}</td></tr>
                        <tr><td class="centered-cell">vCPU per instance</td><td class="centered-cell">{{ .VCPUsPerInstance }}</td></tr>
                        <tr><td class="centered-cell">Memory per instance(GiB)</td><td class="centered-cell">{{ .MemoryPerInstance }}</td></tr>
                        <tr><td class="centered-cell">Optimal select connections per node</td><td class="centered-cell">{{ if eq .OptimalSelectConnectionsPerNode 0 }}--{{ else }}{{ .OptimalSelectConnectionsPerNode }}{{ end }}</td></tr>
                        <tr><td class="centered-cell">Optimal insert connections per node</td><td class="centered-cell">{{ if eq .OptimalInsertConnectionsPerNode 0 }}--{{ else }}{{ .OptimalInsertConnectionsPerNode }}{{ end }}</td></tr>
                        <tr><td class="centered-cell">Estimated time taken for data import </td><td class="centered-cell">{{ .EstimatedTimeInMinForImport }} min</td></tr>
                    </table>
                    <h3>Reasoning:</h3>
                    <p class="spaced-words">{{ .ColocatedReasoning }}</p>
                {{ end }}
            {{ else }}
                <p>Could not perform sizing assessment: {{ .FailureReasoning }}</p>
            {{ end }}
        {{ end }}

        {{ if and (ne .MigrationComplexity "NOT AVAILABLE") (ne (len .MigrationComplexityExplanation) 0) }}
            <h2>Migration Complexity Explanation</h2>
            {{ if .MigrationComplexityCategorySummary }}
                <p>Below is a breakdown of the issues detected in different categories for each impact level.</p>
                <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
                    <thead>
                        <tr>
                            <th class="centered-cell">Category</th>
                            <th class="centered-cell">Level 1</th>
                            <th class="centered-cell">Level 2</th>
                            <th class="centered-cell">Level 3</th>
                            <th class="centered-cell">Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{ range $idx, $summary := .MigrationComplexityCategorySummary }}
                            <tr>
                                <td class="centered-cell">{{ $summary.Category }}</td>
                                <td class="centered-cell">{{ index $summary.ImpactCounts "LEVEL_1" }}</td>
                                <td class="centered-cell">{{ index $summary.ImpactCounts "LEVEL_2" }}</td>
                                <td class="centered-cell">{{ index $summary.ImpactCounts "LEVEL_3" }}</td>
                                <td class="centered-cell">{{ $summary.TotalIssueCount }}</td>
                            </tr>
                        {{ end }}
                    </tbody>
                </table>
            {{ end }}

            <p>
                <strong>Complexity:</strong> {{ .MigrationComplexity }}<br>
                <strong>Reasoning:</strong> {{ .MigrationComplexityExplanation }}
            </p>

            <p>
                <strong>Impact Levels:</strong><br>
                Level 1: Resolutions are available with minimal effort.<br>
                Level 2: Resolutions are available requiring moderate effort.<br>
                Level 3: Resolutions may not be available or are complex.
            </p>
        {{ end }}

        {{ template "issuesTable" (dict "onlyPerf" false "Issues" .Issues) }}
        
        {{ template "issuesTable" (dict "onlyPerf" true "Issues" .Issues) }}
        
{{ define "issuesTable" }}
  {{ $heading := "Assessment Issues" }}
  {{ $issues := filterOutPerformanceOptimizationIssues .Issues }}
  {{ $totalCountKeyWord := "Total issues" }}
  {{ $issueKeyword := "Issue" }}
  {{ $expandButton := "expandAllButton" }}
  {{ $collapseButton := "collapseAllButton" }}

  {{ if .onlyPerf }}
    {{ $heading = "Performance Optimzations" }}
    {{ $issues = getPerformanceOptimizationIssues .Issues }}
    {{ $totalCountKeyWord = "Total optimizations" }}
    {{ $issueKeyword = "Optimization" }}
    {{ $expandButton = "expandAllButton-perf" }}
    {{ $collapseButton = "collapseAllButton-perf" }}
  {{ end }}

        {{ if $issues }}
            <h2>{{ $heading }}</h2>
            <div class="assessment-issues-header">
                <!-- Left area: text about total issues -->
                <div>
                    <p><strong>{{ $totalCountKeyWord }}:</strong> {{ len $issues }}</p>
                    <p>Below is a detailed breakdown of each issue.</p>
                </div>
                <!-- Right area: buttons -->
                <div class="buttons" id="controlButtons">
                    <button class="rounded-button" id={{ $expandButton}} onclick="expandAllIssues({{ .onlyPerf }})">Expand All</button>
                    <button class="rounded-button" id={{ $collapseButton}} onclick="collapseAllIssues({{ .onlyPerf }})">Collapse All</button>
                </div>
            </div>
            <table class="table-highlight">
                <!-- Summary Row Header for the issue -->
                <colgroup>
                    {{ $issueWidth := "40%" }}
                    {{ if not .onlyPerf }}
                        <col style="width: 20%;"> <!-- Category + arrow -->
                        {{ $issueWidth = "20%" }}
                    {{ end }}
                    <col style="width: {{ $issueWidth }};"> <!-- Issue Name -->
                    <col style="width: 50%;"> <!-- Object/SQL Preview -->
                    <col style="width: 10%;"> <!-- Impact -->
                </colgroup>
                <thead>
                    <tr style="background-color: #f2f2f2;">
                       {{ if not .onlyPerf }}
                            <th class="centered-cell" style="cursor: pointer;" onclick="sortTableBy('category', {{ .onlyPerf }})">
                            Category <span class="sort-indicator">&#8597;</span>
                            </th>
                       {{ end }}
                        <th class="centered-cell" style="cursor: pointer;" onclick="sortTableBy('name', {{ .onlyPerf }})">
                            {{ $issueKeyword }} <span class="sort-indicator">&#8597;</span>
                        </th>
                        <th class="centered-cell">Object/SQL Preview</th>
                        <th class="centered-cell" style="cursor: pointer; text-align: center;" onclick="sortTableBy('impact', {{ .onlyPerf }})">
                            Impact <span class="sort-indicator">&#8597;</span>
                        </th>
                    </tr>
                </thead>
                {{ $onlyPerf := .onlyPerf }}
                {{ range $idx, $issue := $issues }}
                    {{ $detailsId := "details" }}
                    {{ $arrowId := "arrow"}}
                    {{ if $onlyPerf }} 
                        {{ $detailsId = "details-perf" }}
                        {{ $arrowId = "arrow-perf"}}
                    {{ end }}
                    <tbody class="issue-summary-detail-pair"
                        data-category="{{ $issue.Category }}"
                        data-name="{{ $issue.Name }}"
                        data-impact="{{ $issue.Impact }}">
                        
                        <!-- Summary Row -->
                        <tr class="summary-row" onclick="toggleDetails('{{ $detailsId }}-{{ $idx }}', '{{ $arrowId }}-{{ $idx }}', {{ $onlyPerf }})">
                            {{ if not $onlyPerf }}
                                <td class="centered-cell">
                                    <div class="category-cell-flex">
                                        <div class="arrow-container">
                                            <span id="{{ $arrowId}}-{{ $idx }}">&#9654;</span>
                                        </div>
                                        <span style="word-break: break-word;">{{ snakeCaseToTitleCase $issue.Category }}</span>
                                    </div>
                                </td>
                            {{ end }}
                            <td class="centered-cell">
                                <div class="category-cell-flex">
                                    {{ if $onlyPerf }}
                                        <div class="arrow-container">
                                            <span id="{{ $arrowId}}-{{ $idx }}">&#9654;</span>
                                        </div>
                                    {{ end }}
                                    {{ $issue.Name }}
                                </div>
                            </td>
                            <td class="centered-cell">
                                {{ if $issue.ObjectName }}
                                    {{ $issue.ObjectName }}
                                {{ else }}
                                    {{ getSqlPreview $issue.SqlStatement }}
                                {{ end }}
                            </td>
                            <td class="centered-cell" style="text-align: center;">{{ snakeCaseToTitleCase $issue.Impact }}</td>
                        </tr>

                        <!-- Hidden Details of the Row -->
                        <tr id="{{ $detailsId }}-{{ $idx }}" class="details-row">
                            <td colspan="4">
                                <div class="details-content-wrapper">
                                    <div class="details-content">
                                        <table class="formatted_table" style="width: 100%; border: 1px solid #ddd; margin-top: 5px;">
                                            <colgroup>
                                                <col style="width: 25%;">
                                                <col style="width: 75%;">
                                            </colgroup>
                                            <tbody>
                                                {{ if and $issue.CategoryDescription (not $onlyPerf) }}
                                                    <tr>
                                                        <th class="centered-cell">Category Description</th>
                                                        <td>
                                                            <div style="max-height:150px; overflow-y:auto; border:1px solid #ccc; padding:5px;">
                                                                {{ $issue.CategoryDescription }}
                                                            </div>
                                                        </td>
                                                    </tr>
                                                {{ end }}

                                                <!-- Only show if ObjectType is present -->
                                                {{ if $issue.ObjectType }}
                                                    <tr>
                                                        <th class="centered-cell">Object Type</th>
                                                        <td>{{ $issue.ObjectType }}</td>
                                                    </tr>
                                                {{ end }}
                                                {{ if $issue.ObjectName }}
                                                    <tr>
                                                        <th class="centered-cell">Object Name</th>
                                                        <td>{{ $issue.ObjectName }}</td>
                                                    </tr>
                                                {{ end }}
                                                <tr>
                                                    <th class="centered-cell">SQL Statement</th>
                                                    <td>
                                                        {{ if $issue.SqlStatement }}
                                                            <div style="max-width: 100%; width: 100%; overflow-x: auto; overflow-y: auto; border: 1px solid #ccc;">
                                                                <pre style="font-size: 1em; white-space: pre-wrap; word-break: break-word; overflow-wrap: break-word; margin: 0; padding: 8px; color: #000; font-family: Arial, sans-serif;">{{ $issue.SqlStatement }}</pre>
                                                            </div>
                                                        {{ else }}
                                                        <!-- display N/A if Sql Statement not present -->
                                                            N/A
                                                        {{ end }}
                                                    </td>
                                                </tr>

                                                <!-- Only show if there is a supported version -->
                                                {{ $verStr := getSupportedVersionString $issue.MinimumVersionsFixedIn }}
                                                {{ if $verStr }}
                                                    <tr>
                                                        <th class="centered-cell">Supported In (versions)</th>
                                                        <td>{{ $verStr }}</td>
                                                    </tr>
                                                {{ end }}
                                                <tr>
                                                    <th class="centered-cell">Description</th>
                                                    <td>
                                                        {{ if $issue.Description }}
                                                            <div style="max-width: 100%; width: 100%; overflow-x: auto; overflow-y: auto; border: 1px solid #ccc;">
                                                                <pre style="font-size: 1em; white-space: pre-wrap; word-break: break-word; overflow-wrap: break-word; margin: 0; padding: 8px; color: #000; font-family: Arial, sans-serif;">{{ $issue.Description }}</pre>
                                                                {{ if $issue.DocsLink }}
                                                                    <pre style="font-size: 1em; white-space: pre-wrap; word-break: break-word; overflow-wrap: break-word; margin: 0; padding: 8px; color: #000; font-family: Arial, sans-serif;">Refer to the <a href="{{ $issue.DocsLink }}" target="_blank" title="{{ $issue.DocsLink }}">docs</a> for more details.</pre>
                                                                {{ end }}
                                                            </div>
                                                        {{ else }}
                                                        <!-- display N/A if description not present -->
                                                            N/A
                                                        {{ end }}
                                                    </td>
                                                </tr>
                                               {{ if $issue.Details }}
                                                    <tr>
                                                        <th class="centered-cell">More Information</th>
                                                        <td>
                                                            <ul>
                                                            {{ range $key, $value := $issue.Details }}
                                                                <li><pre style="font-size: 1em; white-space: pre-wrap; word-break: break-word; overflow-wrap: break-word; margin: 0; padding: 8px; color: #000; font-family: Arial, sans-serif;">{{ camelCaseToTitleCase $key }}: {{ $value }}</pre></li>
                                                            {{ end }}
                                                            </ul>
                                                        </td>
                                                    </tr>
                                               {{ end }}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                {{ end }}
            </table>

        {{ else if not .onlyPerf }} 
            <p>No issues were found in the assessment.</p>
        {{ end }}
   

 
{{ end }}


        {{ if .Notes }}
            <hr>
            <div>
                <h4>Notes</h4>
                <ul id="notes-list">
                    {{ range .Notes }}
                        <li>{{ . }}</li>
                    {{ end }}
                </ul>
            </div>
        {{ end }}
    </div>
</body>
<!--
  This script tag is placed at after the end of the body tag to ensure the DOM elements is fully loaded
  before it runs. This is necessary because placing the script in the head would
  execute it before elements with id #notes-list are available in the DOM, causing it
  to miss URLs.
-->
<script>
    const notesListItems = document.querySelectorAll("#notes-list li");

    notesListItems.forEach((li) => {
        const originalText = li.textContent.trim();
        const words = originalText.split(' ');

        const hasUrl = words.some(word => word.startsWith('http://') || word.startsWith('https://'));
        if (!hasUrl) return;

        li.textContent = '';

        words.forEach((word, index) => {
            let url = word;
            let charThatWillBeRemoved = '';

            const isUrl = url.startsWith('http://') || url.startsWith('https://');

            if (isUrl) {
                const lastChar = url[url.length - 1];
                const urlCantEndWithTheseChars = [',', '.', '!', '?', ';', ':'];
                if (urlCantEndWithTheseChars.includes(lastChar)) {
                    charThatWillBeRemoved = lastChar;
                    url = url.slice(0, -1);
                }

                const aTag = document.createElement("a");
                aTag.href = url;
                aTag.textContent = url;
                aTag.classList.add("highlight-link");
                aTag.target = "_blank";
                li.appendChild(aTag);
                if (charThatWillBeRemoved) {
                    li.appendChild(document.createTextNode(charThatWillBeRemoved));
                }
            } else {
                li.appendChild(document.createTextNode(word));
            }
            if (index < words.length - 1) {
                li.appendChild(document.createTextNode(' '));
            }
        });
    });
</script>
</html>