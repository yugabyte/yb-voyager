//go:build integration

/*
Copyright (c) YugabyteDB, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law oqr agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package tgtdb

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/yugabyte/yb-voyager/yb-voyager/src/utils/sqlname"
	testutils "github.com/yugabyte/yb-voyager/yb-voyager/test/utils"
)

func TestOracleGetIdentityColumnNamesForTable(t *testing.T) {
	// Initialize connection pool used by the function to be tested
	oracle := testOracleTarget.TargetDB.(*TargetOracleDB)
	err := oracle.InitConnPool()
	require.NoError(t, err)

	// Create test tables with identity columns using ExecuteSqls
	// Note: Oracle allows only one identity column per table (ORA-30669)
	testOracleTarget.ExecuteSqls(
		`CREATE TABLE always_table (
			id NUMBER GENERATED ALWAYS AS IDENTITY,
			data VARCHAR2(100)
		)`,
		`CREATE TABLE bydefault_table (
			id NUMBER GENERATED BY DEFAULT AS IDENTITY,
			data VARCHAR2(100)
		)`,
		`CREATE TABLE always_table2 (
			always_col NUMBER GENERATED ALWAYS AS IDENTITY,
			regular_col NUMBER,
			data VARCHAR2(100)
		)`,
		`CREATE TABLE bydefault_table2 (
			bydefault_col NUMBER GENERATED BY DEFAULT AS IDENTITY,
			regular_col NUMBER,
			data VARCHAR2(100)
		)`,
		`CREATE TABLE no_identity_table (
			id NUMBER PRIMARY KEY,
			data VARCHAR2(100)
		)`,
	)
	defer testOracleTarget.ExecuteSqls(
		`DROP TABLE always_table`,
		`DROP TABLE bydefault_table`,
		`DROP TABLE always_table2`,
		`DROP TABLE bydefault_table2`,
		`DROP TABLE no_identity_table`,
	)

	tests := []struct {
		name         string
		tableName    string
		identityType string
		expectedCols []string
	}{
		{
			name:         "ALWAYS from always_table",
			tableName:    "ALWAYS_TABLE",
			identityType: "ALWAYS",
			expectedCols: []string{"ID"},
		},
		{
			name:         "BY DEFAULT from bydefault_table",
			tableName:    "BYDEFAULT_TABLE",
			identityType: "BY DEFAULT",
			expectedCols: []string{"ID"},
		},
		{
			name:         "ALWAYS from always_table2",
			tableName:    "ALWAYS_TABLE2",
			identityType: "ALWAYS",
			expectedCols: []string{"ALWAYS_COL"},
		},
		{
			name:         "BY DEFAULT from bydefault_table2",
			tableName:    "BYDEFAULT_TABLE2",
			identityType: "BY DEFAULT",
			expectedCols: []string{"BYDEFAULT_COL"},
		},
		{
			name:         "ALWAYS from no_identity_table",
			tableName:    "NO_IDENTITY_TABLE",
			identityType: "ALWAYS",
			expectedCols: nil,
		},
		{
			name:         "BY DEFAULT from always_table (empty)",
			tableName:    "ALWAYS_TABLE",
			identityType: "BY DEFAULT",
			expectedCols: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Get the schema name from the Oracle target configuration
			schemaName := oracle.tconf.Schema
			tableNameTup := sqlname.NameTuple{
				CurrentName: sqlname.NewObjectName(ORACLE, schemaName, schemaName, tt.tableName),
			}

			actualCols, err := oracle.GetIdentityColumnNamesForTable(tableNameTup, tt.identityType)
			assert.NoError(t, err)
			testutils.AssertEqualStringSlices(t, tt.expectedCols, actualCols)
		})
	}
}
