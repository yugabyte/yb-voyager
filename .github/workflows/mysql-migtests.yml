name: "MySQL: Migration Tests (CLI + Config File Workflows)"

on:
  push:
    branches: ['main', '*.*-dev', '*.*.*-dev']
  pull_request:
    branches: [main]

jobs:
  run-mysql-migration-tests:
    strategy:
      matrix:
        version: [2024.2.4.0-b89, 2.20.10.0-b29, 2.25.2.0-b359, 2025.1.0.0-b168, 2024.1.6.1-b2]
        BETA_FAST_DATA_EXPORT: [0, 1]
    env:
      BETA_FAST_DATA_EXPORT: ${{ matrix.BETA_FAST_DATA_EXPORT }}
      YB_VOYAGER_SEND_DIAGNOSTICS: 0
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        # https://github.com/actions/setup-java
        with:
          distribution: "temurin"
          java-version: "17"
          check-latest: true
      
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install python3 and psycopg2
        run: |
          sudo apt install -y python3
          sudo apt install -y libpq-dev
          sudo apt install python3-psycopg2

      - name: Update certificates for SSL connections
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates

      - name: Run installer script to setup voyager
        run: |
          yes | ./installer_scripts/install-yb-voyager --install-from-local-source
        env:
          ON_INSTALLER_ERROR_OUTPUT_LOG: Y
          DEBEZIUM_VERSION: aneesh_ff-fb-remove
          DEBEZIUM_RELEASE_TAG: voyager-debezium

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          
          # Wait for MySQL to be ready with health check instead of fixed sleep
          echo "Waiting for MySQL to be ready..."
          timeout 30s bash -c 'until mysqladmin ping -h localhost --silent; do
            echo "MySQL not ready yet, waiting 1 second..."
            sleep 1
          done'
          echo "MySQL is ready!"

      - name: Test MySQL connection
        run: |
          mysql -uroot -proot -e 'select version();'

      - name: Create MySQL user
        run: |
          ./migtests/scripts/mysql/create_mysql_user

      - name: Start YugabyteDB cluster
        run: |
          docker run -d --name yugabytedb --hostname yb-cluster-test\
            -p7000:7000 -p9000:9000 -p15433:15433 -p5433:5433 -p9042:9042 \
            yugabytedb/yugabyte:${{ matrix.version }} \
            bin/yugabyted start --tserver_flags="ysql_hba_conf_csv={host all yugabyte all trust,host all all all md5}" --background=false --ui=false --callhome=false 
          
          # Wait for YugabyteDB to be ready with health check instead of fixed sleep
          echo "Waiting for YugabyteDB to be ready..."
          timeout 60s bash -c 'until psql "postgresql://yugabyte:@127.0.0.1:5433/yugabyte" -c "SELECT 1" > /dev/null 2>&1; do 
            echo "YugabyteDB not ready yet, waiting 2 seconds..."
            sleep 2
          done'
          echo "YugabyteDB is ready!"

      - name: Test YugabyteDB connection
        run: |
          psql "postgresql://yugabyte:@127.0.0.1:5433/yugabyte" -c "SELECT version();"

      - name: Create YugabyteDB user
        run: |
          ./migtests/scripts/yugabytedb/create_yb_user

      - name: Enable yb-cluster-test name resolution
        run: |
          docker_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' yugabytedb)
          echo "$docker_ip	yb-cluster-test" | sudo tee -a /etc/hosts
          psql "postgresql://yugabyte@yb-cluster-test:5433/yugabyte" -c "SELECT version();"
      
      - name: "=== CLI WORKFLOW TESTS ==="
        run: echo "Starting CLI workflow tests (7 tests)"
      
      - name: "TEST: mysql-table-list-flags-test (table-list and exclude-table-list)"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/table-list-flags-tests

      - name: "TEST: mysql-sakila"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/sakila

      - name: "TEST: mysql-datatypes"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/datatypes

      - name: "TEST: mysql-constraints"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/constraints

      - name: "TEST: mysql-case-indexes"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/indexes

      - name: "TEST: mysql-functions"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/functions
      - name: "=== CONFIG FILE WORKFLOW TESTS ==="
        run: echo "Starting config file workflow tests (8 tests)"

      - name: "TEST: mysql-table-list-file-path-test (table-list-file-path and exclude-table-list-file-path)"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/table-list-flags-tests env-file-path-flags.sh --run-via-config-file

      - name: "TEST: mysql-case-sequences"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/sequences --run-via-config-file

      - name: "TEST: mysql-triggers-procedures"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/triggers-procedures --run-via-config-file

      - name: "TEST: mysql-case-views"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/views --run-via-config-file

      - name: "TEST: mysql-partitions"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/partitions --run-via-config-file

      - name: "TEST: mysql-sample-chinook"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/chinook --run-via-config-file

      - name: "TEST: mysql-misc-tests"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/misc-tests --run-via-config-file
      
      - name: "TEST: mysql-case-sensitivity-reserved-words"
        if: ${{ !cancelled() }}
        run: migtests/scripts/run-test.sh mysql/case-sensitivity-reserved-words --run-via-config-file

      - name: "=== LIVE MIGRATION TEST ==="
        run: echo "Starting live migration test (CLI)"

      # Placeholder for now so that a basic test can run
      - name: Create the live migration user
        if: always()
        run: |
          mysql -uroot -proot -e 'GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'ybvoyager'@'127.0.0.1';'

      - name: "TEST: mysql-live-migration-test"
        if: ${{ !cancelled() }}
        run: migtests/scripts/live-migration-run-test.sh mysql/basic-live-test
